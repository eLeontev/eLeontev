{"version":3,"sources":["src/model/game.model.ts","src/helpers/radiant-transformer.ts","src/game/constants.ts","src/game/renderer.ts","src/game/state.ts","src/game/calculation/rest-range.calculation.ts","node_modules/lodash.uniqueid/index.js","src/helpers/randomizer.ts","src/game/calculation/entity.calculation.ts","src/game/calculation/helper-entity.calculation.ts","src/game/index.ts","index.ts"],"names":[],"mappings":";AMAA;AACA;AACA;AACA;AACA,AJFa,AFeb,IAAY,GEfC,CAAA,KFeb,aEfa,GAAqB,GAArB;ASFb,ALKA,ADLA,AHGa,AEHb,AHCa,AMDA,IFAb,ADAA,GOAA,ATGa,ADFA,AMDA,CIAb,ATGa,ADFA,AMDA,OFAb,ADAA,GCAA,ADAA,AHCa,GUDb,AVC0B,CUD1B,GNAA,ADAA,CCAA,AHGa,AEHb,EGAa,CLGqB,EAArB,ADFc,AMDS,ONCV,CGD1B,CCAA,ADAA,AHC0C,CID1C,AEAqC,GAAD,EAAc,GAAd,EAAyB;ADM7D,AJFa,ADHkC,AMA3C,APgBJ,CAAA,MEba,CAAA,CDHmC,AMA5C,EPgBQ,EChBwC,AMA5C,CNA6C,AMA5C,ENAuC,GAAU,AMAtD,CAAW,APgBf,EChB+C,ADgB1B,CEbR,AKHK,ENA+C,CCGlC,AKHV,ELGR,EKHY,CAAC,CNAqB,KMA1B,MAAiB,GAAG,GAAG,CAAN,GAAU,GAA3B,CAAjB,CAAA;ADMJ,AGPA,AJGA,AHGa,ACNb,ACGa,AHF2D,AMAnB,APiBjD,CCjBS,AMDA,CPkBT,ESlBJ,AJGM,AFHN,GDMa,AEHA,CFGA,AEHA,GJeT,CAAA,CIfS,GKHb,ANAA,ACG4B,GKH5B,ANAA,EEGuB,ALenB,CAAA,EKfsB,EIH1B,ANAA,CMAA,ANAA,MEGM,AHGO,AFYT,CAAA,EEZqC,CFYrC,CAAA,CEZS,AFYT,CAAA,GAAA,KGlBJ,CAAA,CEG0B,CIH1B,AJG2B,CIH3B,EJG0B,ALetB,EKfkC;ACKtC,ADLmD,AHItC,AEHT,AJeA,EIfA,AJeA,KEZS,CAAA,CGJsC,CDCvC,CJeR,CIfU,AJeV,EIhBwB,GCA+B,CAAC,GAAD,ALgBvD,CAAA,CKhB6D,EAAN,CAAR,MHItC,GAA2B,GAA3B,MFYT,CAAA,GAAA,CAAA,CAAA,GAAA,sBAAA;AMVJ,AGRA,AJEoE,AHMvD,ACPb,ACGI,AJeH,CKjBD,ALcA,CIZI,CJYQ,CShBZ,ANCA,GDOa,CAAA,IFQQ,CIZN,EKJf,ANCA,ACGiB,AJYL,CIdgB,EKF5B,ANCA,IHeY,CAAA,EShBZ,ANCA,CMDA,ANCA,MHeY,GERC,EFQD,CER+B,CCP3C,CMDA,ANCA,CMDA,GTgBY,CAAA,SAAA,GAAS,CERR,CFQD,CAAZ;AMPA,AJAa,AEJT,EAAA,KFIS,CAAA,qBAAA,GAAwB,CEJF,EAAE,CAHT,gBFOf;AICb,AEXA,ACQa,AJJb,AHQa,ACEb,ACPI,AJ0BJ,EI1BI,EIPJ,AHIM,AFUA,AHmBM,GSzBC,APIA,COJA,APIA,OFqBb,MQjCA,AHIuB,EIIV,CDRb,AHI0B,AFUA,ACPA,EKCK,ALDH,CAJA,CDWF,EAAA,GEVpB,AFUoB,EAAA,CMNM,CNO5B,EKfJ,ANYa,ACGT,CKfJ,ALeK,CMP0B,CPIgB,COJH,API/B,IMZb,CAAA,EHI0B,CAAC,CFWtB,CAAA,CEXqB,EAAY,SGJtC,CAAA,CAAA,ELeK,CAAiB,KAAlB,CAAA,GAA0B,WAAA,CAAA,qBADJ,EAEtB,EAAA,CAAC,YAAA,CAAA,gBAAA,CAAiB,QAAlB,CAAA,GAA6B,WAAA,CAAA,wBAFP,EAGtB,EAAA,CAAC,YAAA,CAAA,gBAAA,CAAiB,gBAAlB,CAAA,GAAqC,WAAA,CAAA,gCAHf,IAAA,CAA1B;AGFA,AGHI,AJL+C,AHUtC,AENT,EKCA,ALDA,KFMS,AENJ,CFMI,COLF,AJLwC,ADIxC,CKCC,EJL0C,CIKlD,AJLmD,CIKvC,KPKH,CENF,CCJwC,ADIxC,CCJqD,AHUrC,EOLvB,AJL+C,CAAA,AHUtC;AIDb,AEXA,ACQI,AJN+D,AHWtD,ACKb,ACjB4B,AJ8B5B,CK7BA,ADDa,AJ8Bb,CSvBI,EDRJ,ALkBA,GMVS,APKI,COLH,APKG,GFkBD,KQ/BZ,ACQI,ENUJ,CKlBA,ACQqB,CPKR,COLT,CTuBJ,CElB4B,CFkBL,CElBV,CMbb,CAAA,wBAAA,CAAA;AFYA,AGHC,APKY,ACIb,AHcI,CS1BS,CT0BT,KElBS,CAAA,KFkBT,CAAA,OAAA,CAAA,GAAA,GElBS,GAAuB,CAAvB,AFkBT;AMnBJ,AEZA,AHEA,AHYa,ACGb,AHeI,EAAA,EQhCJ,AHEM,GHYO,CAAA,ICGb,CHeI,CAAA,CQhCJ,GAAA,AHEoB,GAAG,CHYV,AFkBT,CAAA,EQhCJ,ANc8B,CMd9B,ARgCI,IK9BE,GHYO,CFkBT,MQhCJ,CAAA,GHEuB,CAAC,GAAD,EAAY;ACWnC,AGJa,AJPmC,AHanC,ACqBT,AHHH,CAHD,EAAY,ISrBC,APMA,CONA,APMA,CGbmC,EFkC5C,GHNmB,CK5B6B,EL4BxC,CK5B2C,CAAC,GHa3C,EFeD,CEfkB,ACqB1B,AHNQ,CGOI,CEnCoC,CAAa,CAAb,EIOvC,AJPuD,EHavD,CON0B,AJPa,CAAJ,AFkC5C,CHNQ,CGQI,IHRJ,EGMR,CM3BoC,CN8BxB,GHTJ,CSrB2B,ATqB3B,ESrBwC,KN2BhD,EAIY,EHVJ,GAAW,EAAX,CAAZ,EGMI,EAKI,UALJ,EAMI,iBANJ,EAMiC;AG5BrC,AEbA,ACSI,AJRsE,AHe7D,ACoBG,CEnChB,CIQI,EDTJ,GNgBa,CAAA,COPF,AN2BK,CM3BJ,GAAR,CAAY,IN2BA,GAAA,IKpChB,ACSI,GDTJ,ELoCgB,KKpChB,CAAA,iBNgBa,GAA4D,eMhBzE,CAAA;AFcA,AGJI,APOA,ACoBY,AHHhB,ESxBI,APOA,CAAC,CFiBO,CEjBL,EOPE,APMgE,CON/D,CN2BM,MAAA,GAAA,EHHhB,IGGgB,MM3BZ,GAA+B,KAAK,CAAC,sBAAN,GAA+B,WAAA,CAAA,+BAA9D;AHKJ,AEdA,ACUC,AJRD,AHeI,AQtBJ,AP0CgB,CM9BH,CPUT,CAAC,CMjBL,AHEM,AKPN,CRsBO,ICoBS,OKrChB,AELA,GFKA,AELA,CP0CgB,GAAA,EEnCW,CGF3B,AELA,CFKA,AELA,CLO8B,MFmCd,GEnCV,WKPN,CAAA,IFKA,CAAA,IHE8B,CAAC,QAAD,EAAmB,WAAnB,EAAsC;ACapE,ADZI,AHYqE,ACuBzD,AHLhB,CElBa,AFkBb,QK9BI,AFmCY,EHLJ,MK9BA,EFmCI,CEnCD,EFmCC,KHLhB,EAA4B,EK9BxB,CFmCY;AGtBhB,AEda,ACUA,AJTa,AHiBb,AQjBb,APaqB,AHkBjB,CKhCJ,CLgCI,EU/BJ,GFDa,ACUA,APQA,CMlBA,ACUA,APQA,CCJQ,SHkBjB,CAAA,MU/BJ,CV+BI,CAAA,CU/BJ,CPaqB,CHkBjB,CQhCS,CLcqD,CMJrD,CDV0B,CECvC,CDSyC,ACTzC,CV+BI,SQhCmC,CNkB1B,COR4B,CAAQ,CAApC,APQsD,ECJ9C,gBObrB,CAAA;AJcA,AEdI,ANkBA,ACHiB,AHiBjB,EEdA,AFcA,CEdC,EAAE,EAD4D,EMjB/D,ALeiB,IKfb,CAAC,IRgCL,CAAA,CQhCA,KAAgB,CLeC,EKfjB,CLe6C,AHiB7C,CGjBiB,AHiBjB,CQhCsB,ERgCtB,UQhCsB,ARgCtB,CQhCsB,gBAAA,CAAiB,gBAAvC,GAA0D,YAAA,CAAA,gBAAA,CAAiB,QAA3E;AFeJ,AEfuF,ACWvF,AJVA,AHkBI,AQlBJ,APiBqB,AHejB,CQlCS,CNoBT,AFcA,CEdC,CORC,AJVA,AKAN,CRkBO,ICDc,KOjBrB,GAAA,CVgCI,CAAA,EStBmB,GCVvB,CDUuB,ACVvB,APiBqB,EMPE,CNOyB,CAA3B,CMPE,EAAA,EACnB,AJXgC,EIWhC,CAAC,AJXkC,AKAvC,AVgCI,CUhCJ,AVgCI,GAAA,KKhCE,GIWD,CAAA,STqBD,OSrBC,CAAiB,QAAlB,CAAA,AJXmC,CAAC,EIWP,OAAA,CAAA,AJXM,EAAqB,GAArB,EAAkC,GAAlC,EAA6C,GIU7D,EAEnB,EAAA,CAAC,YAAA,CAAA,gBAAA,CAAiB,gBAAlB,CAAA,GAAqC,OAAA,CAAA,uBAFlB,EAGnB,EAAA,CAAC,YAAA,CAAA,gBAAA,CAAiB,KAAlB,CAAA,GAA0B,OAAA,CAAA,yBAHP,IAAA,CAAvB;AHKA,ADdI,AHe+D,ACE9C,AHepB,CEjBY,AFab,EAAY,MK5BR,AFiBiB,UEjBP,AL4Bc,GAAhB,CK5BM,EFiBG,CEjBA,EFiB2B,CEjBxB,AFiBH,AHWT,CAAA,EK5BE,CAAV,GAA2B,GAA3B,OL4BQ,KAAA,OAAA,CAAA,gBAAA,GAAgB,EAAhB,CAAZ;AMbA,AEfa,ACeA,AJfqB,AHoBrB,AQpBb,APkBqB,CEnBrB,GKCA,GFAa,ACeA,APKA,CMpBA,ACeA,APKA,CCFQ,EOlBrB,GAAA,OAAA,CAAA,EPkBqB,CKlBR,ELkB0C,CKlBtB,CNoBpB,EQpBb,CRoBqC,AQpBrC,EDea,ANGQ,GMHqB,APK7B,CMpBqB,IAAD,EAAkB,GCeR,OAAD,EAAoB,KAApB,EAAgC;AHC1E,AEfI,ACeA,APKS,ACEQ,MKtBX,CNoBG,CAAA,COLT,ANOiB,IKtBJ,GAAG,ACeT,CAAC,GDfY,ICepB,CDfyB,ACeT,OPKP,ACEQ,GMPA,APKmB,ACEe,EKtB1B,ACeT,CDfS,CCemB,GPKnC,ACEQ,OKtBQ,CAAY,KAArC;AFgBJ,AEfI,AHAE,AHoBO,AQpBb,APsBY,IEtBN,AKAN,ELAM,CHoBO,CONU,APMV,CMpBF,AHAL,AFsBM,CEtBN,KKAN,CFAkB,EEAlB,CFAqB,ICcE,ECdvB,CDcuB,ACdvB,CLAM,CIciB,AJdjB,CIciB,EDdF,ALsBT,CKtBS,ELsBwB,KEtBvC,AKAN,CLAM,AHoBO,AQpBb,CPsBY,EDFoC,KMpB3B,CAAiB,CNoBzB,IMpBK,AHAZ,CAAA,EGAwC,AHAxC,OGAwC,CAAA,SHAxC,CAAA,WAAA,CAAA,CGAwC,EAA1C,WHAE,CAAA,CAAA;ACgBN,AEfC,ACaoD,AJd/C,AHsBO,ACCD,CKzBC,GHEN,GAAA,AHsBM,CAAA,CCCD,CEvBL,CIc8C,CJd9C,CAAA,CAAA,CAAD,aIcgE,CAAC,APQ1D,CCCD,EDDyB,CCCO,EDD/B,SORyD,ANS1B,CMTS,ANST,CMT4C,KAAnC,CAAA,cNSzC;AGNZ,AGH8F,AJdxF,AKUN,APcY,GMVR,CAAA,AJdQ,AKUZ,GLVY,EFwBA,CExBA,EAAA,CAAA,CAAA,CAAN,WFwBM,EOdZ,CPcwC,EOdxC,IPcY,GOdZ,CAAA,sCAAA,CAAA;AJQA,AEfa,ACWkF,ANWnF,CMZC,MDVA,CAAA,CLsBD,WKtBC,GAAe,ELsBhB,GAA2B,KKrBnC,ELqBQ,GKtBgB,EAExB,WAFwB,EAGxB,MAHwB,EAIxB,qBAJwB,EAKxB,IALwB,EAKP;AFWrB,AETI,AHRS,AKSb,APwBQ,IOxBR,EFDU,CHRG,CAAA,CFiCA,aKzBa,EEC1B,APwBQ,CKzBqB,EEC7B,APwB+B,EKzBE,CAAC,GAAL,CAAS,AECtC,CAAA,EPwByC,CAAC,CKzBC,ELyBF,CKzBK,ALyBtC,GKzBqB,IAAwB,OHRxC,GAAmD,CGQX,CAAA,QHRY,AKSjE,CAAA,CLTgE,EAGhD,MGKZ;AFUJ,AETI,AL0BY,MK1BN,AHRN,EFkCY,CAAA,GAAA,EElCZ,GAAA,EAAA,CAAA,EGQsB,GAAG,IL0Bb,CAAA,CAAA,UK1B6B,GAAG,GAAnB,GAAyB,WAAA,CAAA,kBAAlD;AFUJ,AERI,AEDJ,APyBgB,IOzBhB,EFCU,AHTN,EFiCe,CAAA,GAAA,KEjCf,GAAA,EGSsB,AHTtB,CAAA,EGSyB,ILwBV,CAAA,COzBnB,APyBgB,GOzBhB,GFC6B,CAAA,GED7B,CAAA,gBFC6B,CAAqB,WAAA,CAAA,YEDlD,CAAA,KFC6B,EAAyC,gBAAzC,IAA6D,GAAtF;AFSJ,AERI,AHRA,AFgCI,MKxBE,AHRA,GFgCG,gBEhCgB,CFgCrB,EEhCwB,CGQC,ALwBA,CAAzB,EKxB4B,YAAA,CAAA,IHRiB,CAAC,QAAD,EAAW,KGQ5B,CAAqB,KHRJ,CAAjD,KGQgC,EAAkC,MAAM,GAAG,GAA3C,CAAhC;AFSJ,AERI,AHRA,AKOI,APyBA,IOzBA,EFCE,AHRA,GFgCG,IOzBL,GAAA,CFCa,GAAG,EHRE,GAAG,CFgCrB,EOzBA,CAAA,APyByB,CAAzB,EKxBgB,CAAA,KEDhB,CAAA,SAAA,KFCgB,CAAqB,CHRc,CAAC,SGQJ,GAAG,GAAnC,EAAwC,EHRL,EAAsB,GAAtB,EAA2B,EGQX,CHRhB,CAAvD,CGQ0E,GAAtD,CAApB;AFSJ,AEPY,AHRR,AKKI,AP2BA,IO3BW,EFGP,CAAA,EHRD,AFgCE,CKxBD,IEHO,GAAA,EP2BX,UO3BW,CAAA,CFGP,CAAA,CAAA,MEHO,CAAA,UAAX;AJWR,AERY,AHPJ,AKKR,AP2BK,IEhCG,AKKF,EFES,CAAA,EHPF,CGOE,CHPA,IKKE,GAAG,QAAQ,CAAC,GLLK,CGOnB,AEFK,CFEL,AEFmB,CFEtB,AHPyB,WAAA,CAAA,CKKjB,EAApB,QLNW;ACiBX,AERI,AHPI,AKKF,ILLE,AKKF,EFEI,AEFJ,GLLO,AKKP,ELLS,GGOG,GAAG,GEFf,CAAA,CAAA,CAAA,ELLuB,CAAC,YGOT,CAAA,IHP0B,CAAC,KGO3B,CAAW,UHPe,CAAlB,KGOR,CAAjB;AFSJ,AERI,AHVO,AKOL,AP4BK,EAAA,CEnCP,CKOI,EFGE,GEHF,GAAA,EAAA,CFGW,AEHX,CP4BG,CAAA,CKzBW,EEHhB,MP4BK,CAAA,cKzBkC,GAAG,ELyBrC,EKzByC,CAAC,ALyBjD,GKzB4C,CAAS,QAAT,ALyB5C,CKzBkB,GAA+C,CAAjE;AFSJ,AERI,AHPH,AKGK,AP4BF,CE1CS,GKcE,EFIL,ELwBN,EO5BW,GAAA,AP4BX,EKxBe,AEJJ,CAAA,AP4BX,EKxBkB,ELwBlB,EO5BE,mBFIuC,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAA1B,GAA+C,CAAjE;AFSJ,AEPI,AEJJ,IAAM,EFII,QEJM,GFIK,AEJF,GFIM,EEJD,EFIK,CAAC,AEJH,IFIF,CAAU,CEJhB,GAAiB,MAAjB,CFI2B,EEJD,CFII,IEJjD,mBFIyB,IAAmD,GAApD,GAA2D,IAAI,CAAC,EAApF;AFQJ,AENI,AELJ,AP0BQ,IO1BF,CP0BG,CKrBC,GAAG,CLqBC,EKrBE,ILqBR,EAAc,KAAK,CO1BD,GAAG,CFKG,GAAG,GLqB3B,EAAgC,CO1BD,GAAG,CAA1C,CFKI,CLqBI,CAAwC,UAAC,MAAD,EAAe;AGd/D,AENI,AELJ,APyBoE,IOzB9D,EFKI,GAAG,CELD,EFKI,CELD,APyBqD,KAAI,CAAC,SKpBzC,CLoBoC,CAAgB,CKpBjD,EELA,GAAG,APyB8B,CAAA,EOzBpE,GFKI;AFOJ,AELI,AENJ,APwB2F,IOxBrF,CPwBE,IKlBG,MENM,GAAG,MAAM,GAAG,CAA7B;AJYA,AELQ,AELR,APuBK,GAFM,CKhBH,AELF,SFKW,EAAA,MELM,GFIZ,AEJ2B;AJWtC,AELQ,AELJ,EAAA,CAAC,CFKG,CELD,QFKU,EAAA,SAFN,CEJ2B;AJYtC,AELQ,AELJ,APuBO,EOvBP,APuBO,COvBN,CFKG,CELD,UFKY,CLkBR,CKlBQ,ALkBR,SAAA,CAAA,CKrBA,SLqBA,GAAP,UACI,MADJ,EAEI,CAFJ,EAGI,CAHJ,EAII,gBAJJ,EAKI,cALJ,EAK2B;AGjB/B,AELQ,AER8B,AP6B9B,CO7BR,GFQQ,ILqBA,YKrBgB,EAAA,ELqBhB,KAAA,KAAA,CAAA,EAAA,CKzBG;AFUX,AELQ,AEJA,APwBA,IKpBA,AEJA,CAAA,CPwBA,EOxBA,WFIe,EAAE,CAAC,ALoBlB,GKpBiB,AEJjB,APwB2B,COxB3B,CFIuB,AEJvB,GFIiB,ALoBe,CKzB7B,oBLyBH;AGdR,AELQ,AELA,APwBqD,IKnBrD,AELG,CAAA,GAAA,GFKI,EAAE,YELN,CAAA,CAAH,GFKS,CAAA,OAAA,CAAS,WAAT,CANN;AFYX,AELQ,AEJR,IFIQ,AEJF,IFIM,EAAA,AEJA,GAAG,CFHJ,OEGY,CAAC,cAAT,CAAwB,QAAxB,CAAf;AJUA,AELQ,AEJR,APwBQ,IKpBA,AEJF,GAAG,EPwBI,COxBD,MAAM,CAAC,EFII,ALoBf,CAAgB,CKpBC,KLoBjB,COxBI,CFIa,AEJK,APwBE,CKpBP,ALoBjB,EAA2B,COxBvB,APwBJ,COxBR,CPwBsC,YKpBb,CAAkB,GLoBnC,CKpBiB,CLoB+B,cAAhD;AGdR,AEdW,AEMX,APuBK,GK7BD,ALqBO,COfL,cAAc,GAAG,IAAI,UAAA,CAAA,cAAJ,CACnB,GADmB,EAEnB,MAFmB,EAGnB,WAHmB,EAInB,UAJmB,EAKnB,qBAAA,CAAA,UALmB,EAMnB,iBANmB,CAAvB;AJSA,AELC,AEKD,CFvCa,GEuCT,gBAAgB,GAAG,SAAvB;AJCA,AHeW,EAAA,cAAA,CAAA,SAAA,CAAA,aAAA,GAAP,YAAA;AGdJ,AIAA,APeQ,IOfF,KPeO,SAAL,CAAe,IOfE,GAAG,EPepB,OOfF,mBAAsB,CAAC,QAAD,EAAqB;AJCjD,AIAI,APeI,EOfJ,OPeS,COfD,CAAC,OPeL,CAAe,QOfnB,CAA0B,APetB,GAA2B,IOf/B,CPeoC,COfD,QAAnC,aPeI;AGdR,AIAI,APeI,EOfJ,OPeS,COfD,CAAC,OPeL,CAAe,QOfnB,APeI,COfsB,APeE,CAAxB,EAA2B,CAA3B,EAA8B,GOflC,EAAqC,APeE,QOfvC,EPeI,EAA+C,KAAK,UAApD;AGdR,AIAC,APeI,COlBL,EPcW;AGVX;AACA,AIDA,APgBW,EAAA,EOhBL,WAAW,CPgBN,CAAA,COhBS,QPgBT,COhBL,APgBK,WOhBS,CAAC,APgBV,GAAP,EOhBgB,EAAc,MPgBV,QAApB,EAAsC;AGd1C,AIDI,APeA,MOfM,EPeN,KAAA,COfc,EPed,COfiB,GPejB,kBOfiB,CAAA,UAAA,CAAW,KAAX,CAAjB;AJEJ,AIDI,MAAM,SAAS,GAAG,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAAT,GAA8B,CAAhD;AJEJ,AIDI,APcI,IAAA,EOdE,MPcM,CAAC,EOdE,GAAG,EPcd,CAAiB,GOdG,GAAG,IAAI,APcT,COdU,CPcX,EOdM,APcyD,COdhD,QAAT,CAAT,GAA8B,CAAhD;AJEJ,AIAI,EAAA,QPYwB,MOZV,CAAC,EPYS,GAAA,EAAA,CAAA,GOZxB,CAA2B,SAA3B,EAAsC,SAAtC;AJCJ,AIAC,CAND,SPiBuC,SAAA,GAAA,EAAA,CAAA;AGVvC,UHUkD,WAAA,GAAA,EAAA,CAAA;AGTlD,AIAA,IAAM,MPSyD,SOT1C,GAAG,GPSuC,GAAA,EAAA,COTzD,APSyD,eOTvC,CAAC,YAAD,EAAuB,SAAvB,EAAwC;AJChE,AIAI,APSQ,SOTD,IPSC,KOTQ,APSJ,CAAC,IOTQ,MPSb,CACI,EOVL,GACD,MPQE,EAEI,IOVM,IAAI,CAAhB,APQE,EAGI,COVF,GADJ,GAEI,EPMF,EAII,KAAI,CAAC,EObV,GAID,YAAY,GPSN,COTU,APSgB,GOThC,GACA,CADA,GAEA,KPOM,CAJJ,EAKI,IOdZ,CPcgB,CAAC,oBAAL,CAA0B,eAA1B,CALJ,CAAA;AGRZ,AIMC,APQY,COhBb,IPSQ;AGNR,AHeK,GAVM;AGJX,AIMA,IAAM,uBAAuB,GAAG,SAA1B,uBAA0B,GAAA;AJLhC,AIMY,APSD,EAAA,IOTC,KAAA,GAAA,EPSD,CAAA,IOTC,CAAA,IPSD,COTC,APSD,COTC,KAAA,KPSD,GAAP,UAAmB,SAAnB,EAAsC,SAAtC,EAAuD;AGd3D,AIMI,APSI,EOTJ,OPSS,IOTE,CAAC,IPSR,CAAe,EOTP,CAAA,KAAA,CAAM,APSd,KOTO,CAAX;AJLJ,AIMI,APSI,EOTJ,OAAA,APSS,COTT,KAAA,CAAM,IPSF,COTJ,APSqB,GOTP,EPSY,aOTG,CAAC,GPS1B,EOT+B,APSU,GOTP,EPSY,cOTrB,EAA2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","file":"game_touch.77de5100.js","sourceRoot":"..","sourcesContent":["export interface Game {\n    name: string;\n    level: number;\n    score: number;\n}\n\nexport interface Coordinate {\n    x: number;\n    y: number;\n}\n\nexport interface Field {\n    radius: number;\n    backgroundColor: number;\n    middleCoordinate: Coordinate;\n}\n\nexport enum direction {\n    clockwise = -1,\n    сСlockwise = 1\n}\n\nexport interface Pointer {\n    direction: direction;\n    color: string;\n    angle: number;\n}\n\nexport interface Switcher {\n    rootAngle: number;\n    offsets: number;\n}\n\nexport enum entityTypes {\n    enemy = 'enemy',\n    helper = 'helper'\n}\n\nexport enum entityProperties {\n    enemy = 'enemy',\n    exploder = 'exploder',\n    counterIncreaser = 'counterIncreaser'\n}\n\nexport interface Entity {\n    type: entityTypes;\n    enetityProperty: entityProperties;\n    xPosition: number;\n    yPosition: number;\n    enemyRadius: number;\n    middlePointAngle: number;\n    enemyAngleRange: Array<number>;\n    enemyId: number;\n}\n\nexport interface State {\n    entities: Array<Entity>;\n    tickCounter: number;\n    countOfTicksWithoutEnemyDestory: number;\n    changeDirectionCounter: number;\n    angle: number;\n}\n\nexport interface LoaderData {\n    width: number;\n    color: string;\n}\n\nexport interface LoaderPostion {\n    position: number;\n    maxPosition: number;\n}\n","export type GetRadians = (degrees: number) => number;\nexport const getRadians = (degrees: number) => (Math.PI / 180) * degrees;\n","import { Coordinate } from '../model/game.model';\n\nexport const startAnglePosition = 179;\nexport const minimumEnemyOffset = 20;\nexport const maxEnemiesCount = 10;\n\nexport const maxDelayToAddEnemyInTicks = 360;\nexport const maxDelayInactionsInTicks = 180;\n\nexport const changeDirectionTriesMessage = 'direction counter:';\nexport const countOfEnemiesMessage = 'count of entities:';\n\nexport const changeDirectionCounterIncrement = 4;\n\nexport const loaderWidth = 200;\nexport const loaderHeight = 15;\nexport const verticalLoaderOffset = 7;\nexport const loaderMinColor = '00ff00';\nexport const loaderMaxColor = 'ff0000';\n\nexport const countOfChangeDirectionTriesMessageCoordintate: Coordinate = {\n    x: 10,\n    y: 85\n};\n\nexport const countOfEnemiesMessagePositionCoordinate: Coordinate = {\n    x: 10,\n    y: 40\n};\n\nexport const enemyStrokeStyleColor = 'red';\nexport const exploderStrokeStyleColor = 'black';\nexport const counterIncreaserStrokeStyleColor = 'green';\n\nexport const helperGeneratorChance = 0.1;\n","import { Entity, Coordinate, LoaderData, entityProperties } from '../model/game.model';\nimport { GetRadians } from '../helpers/radiant-transformer';\nimport {\n    loaderHeight,\n    loaderWidth,\n    verticalLoaderOffset,\n    enemyStrokeStyleColor,\n    exploderStrokeStyleColor,\n    counterIncreaserStrokeStyleColor\n} from './constants';\n\ntype EntityPropertyColors = {\n    [type in entityProperties]: string;\n};\nconst entityPropertyColors: EntityPropertyColors = {\n    [entityProperties.enemy]: enemyStrokeStyleColor,\n    [entityProperties.exploder]: exploderStrokeStyleColor,\n    [entityProperties.counterIncreaser]: counterIncreaserStrokeStyleColor\n};\n\nexport class CanvasRenderer {\n    private readonly entityPropertyColors: EntityPropertyColors = entityPropertyColors;\n\n    private readonly defaultStartAngle: number = 0;\n    private readonly defaultEndAngle: number;\n\n    private readonly defaultLineWidth: number = 1;\n    private readonly pointerLineWidth: number = 4;\n    private readonly defaultLineJoin: CanvasLineJoin = 'round';\n\n    private readonly middleXCoordinate: number;\n    private readonly middleYCoordinate: number;\n\n    private readonly defaultStrokeStyleColor: string = 'black';\n    private cleanUpBackgroundColor: string = 'white';\n    private enemyStrokeStyleColor: string = enemyStrokeStyleColor;\n    private pointerStyleColor: string = 'blue';\n    private defaultTextColor: string = 'black';\n\n    constructor(\n        private canvasCtx: CanvasRenderingContext2D,\n        private radius: number,\n        private innerRadius: number,\n        private canvasSize: number,\n        getRadians: GetRadians,\n        canvasMiddlePoint: Coordinate\n    ) {\n        this.defaultEndAngle = getRadians(360);\n\n        const { x, y } = canvasMiddlePoint;\n        this.middleXCoordinate = x;\n        this.middleYCoordinate = y;\n\n        this.initCanvas();\n    }\n\n    public drowStaticGameField() {\n        [this.radius, this.innerRadius].forEach((radius: number) => this.drowCircle(radius));\n    }\n\n    public drowEntity(\n        radius: number,\n        x: number,\n        y: number,\n        strokeStyleColor: string = this.enemyStrokeStyleColor,\n        fillStyleColor?: string\n    ) {\n        this.drowCircle(radius, x, y, strokeStyleColor, fillStyleColor);\n    }\n\n    public canvasCleanUp() {\n        this.canvasCtx.beginPath();\n        this.canvasCtx.fillStyle = this.cleanUpBackgroundColor;\n        this.canvasCtx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n    }\n\n    public drowEntities(entities: Entity[]) {\n        entities.forEach(({ xPosition, yPosition, enemyRadius, enetityProperty }: Entity) =>\n            this.drowEntity(\n                enemyRadius,\n                xPosition,\n                yPosition,\n                this.entityPropertyColors[enetityProperty],\n                this.entityPropertyColors[enetityProperty]\n            )\n        );\n    }\n\n    public drowPointer(xPosition: number, yPosition: number) {\n        this.canvasCtx.beginPath();\n        this.setPathView(this.pointerStyleColor, this.pointerLineWidth, this.defaultLineJoin);\n\n        this.canvasCtx.moveTo(this.middleXCoordinate, this.middleYCoordinate);\n        this.canvasCtx.lineTo(xPosition, yPosition);\n\n        this.canvasCtx.stroke();\n    }\n\n    public drowText(\n        messageWithCounter: string,\n        { x, y }: Coordinate,\n        specificTextColor: string | null\n    ) {\n        this.canvasCtx.font = '25px Arial';\n        this.canvasCtx.fillStyle = specificTextColor || this.defaultTextColor;\n        this.canvasCtx.fillText(messageWithCounter, x, y);\n    }\n\n    public drowLoader({ x, y }: Coordinate, { width, color }: LoaderData) {\n        const yWithOffset = y + verticalLoaderOffset;\n\n        this.canvasCtx.beginPath();\n        this.canvasCtx.fillStyle = color;\n        this.canvasCtx.fillRect(x, yWithOffset, width, loaderHeight);\n\n        this.canvasCtx.beginPath();\n        this.canvasCtx.strokeStyle = this.defaultStrokeStyleColor;\n        this.canvasCtx.strokeRect(x, yWithOffset, loaderWidth, loaderHeight);\n    }\n\n    private drowCircle(\n        radius: number,\n        x: number = this.middleXCoordinate,\n        y: number = this.middleYCoordinate,\n        strokeStyleColor: string = this.defaultStrokeStyleColor,\n        fillStyleColor?: string,\n        lineWidth: number = this.defaultLineWidth,\n        startAngle: number = this.defaultStartAngle,\n        endAngle: number = this.defaultEndAngle,\n        lineJoin: CanvasLineJoin = this.defaultLineJoin\n    ) {\n        this.canvasCtx.beginPath();\n        this.setPathView(strokeStyleColor, lineWidth, lineJoin, fillStyleColor);\n\n        this.canvasCtx.arc(x, y, radius, startAngle, endAngle);\n        this.canvasCtx.stroke();\n        this.canvasCtx.fill();\n    }\n\n    private initCanvas() {\n        this.canvasCtx.canvas.width = this.canvasSize;\n        this.canvasCtx.canvas.height = this.canvasSize;\n        this.canvasCtx.canvas.style.backgroundColor = this.cleanUpBackgroundColor;\n    }\n\n    private setPathView(\n        strokeStyleColor: string,\n        lineWidth: number,\n        lineJoin: CanvasLineJoin,\n        fillStyleColor?: string\n    ) {\n        this.canvasCtx.strokeStyle = fillStyleColor\n            ? this.defaultStrokeStyleColor\n            : strokeStyleColor;\n        this.canvasCtx.fillStyle = fillStyleColor || this.cleanUpBackgroundColor;\n        this.canvasCtx.lineWidth = lineWidth;\n        this.canvasCtx.lineJoin = lineJoin;\n    }\n}\n","import { startAnglePosition } from './constants';\nimport { State } from '../model/game.model';\n\nexport const state: State = {\n    entities: [],\n    tickCounter: 0,\n    countOfTicksWithoutEnemyDestory: 0,\n    changeDirectionCounter: 5,\n    angle: startAnglePosition\n};\n","import { loaderMinColor, loaderMaxColor, loaderWidth } from '../constants';\nimport { LoaderData, LoaderPostion } from '../../model/game.model';\n\nconst transformHexToDec = (hex: string): number => parseInt(hex, 16);\nconst transformDecToHex = (dec: number): string => dec.toString(16);\nconst colorHexFormat = (hex: string): string => `#${hex.padStart(6, '0')}`;\n\nconst getPositionInPercents = (position: number, maxPosition: number): number =>\n    position / maxPosition;\nconst getValueBasedOnPercentsInRange = (percentage: number, min: number, max: number): number =>\n    percentage * (max - min) + min;\n\nconst [min, max] = [transformHexToDec(loaderMinColor), transformHexToDec(loaderMaxColor)];\n\nexport const getLoaderDataBasedOnCurrentLoaderCounterPosition = ({\n    position,\n    maxPosition\n}: LoaderPostion): LoaderData => {\n    const percentagesPosition = getPositionInPercents(position, maxPosition);\n    const decColorPosition = getValueBasedOnPercentsInRange(percentagesPosition, min, max);\n\n    return {\n        width: percentagesPosition * loaderWidth,\n        color: colorHexFormat(transformDecToHex(decColorPosition))\n    };\n};\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","export const randomIntegerInRange = (min: number, max: number): number =>\n    Math.floor(min + Math.random() * (max + 1 - min));\n","import uniqueId from 'lodash.uniqueid';\n\nimport { Entity, Coordinate, entityTypes, entityProperties } from '../../model/game.model';\nimport { minimumEnemyOffset } from '../constants';\nimport { getRadians } from '../../helpers/radiant-transformer';\nimport { randomIntegerInRange } from '../../helpers/randomizer';\n\nexport const getRandomHelperProperty = () =>\n    Math.random() > 0.5 ? entityProperties.counterIncreaser : entityProperties.exploder;\n\nexport const getEntityProperty = (type: entityTypes) => {\n    const isEnemy = type === entityTypes.enemy;\n    return isEnemy ? entityProperties.enemy : getRandomHelperProperty();\n};\n\nexport const createEntity = (\n    angle: number,\n    innerRadius: number,\n    radius: number,\n    middlePointCoordinate: Coordinate,\n    type: entityTypes\n): Entity => {\n    const minEnemyPosition = Math.abs(angle % 360) + minimumEnemyOffset;\n    const maxEnemyPosition = minEnemyPosition + 360 - minimumEnemyOffset;\n\n    const middlePointAngle = randomIntegerInRange(minimumEnemyOffset, maxEnemyPosition) % 360;\n    const distanceFromMiddlePoint = randomIntegerInRange(innerRadius, radius * 0.9);\n    const enemyRadius = randomIntegerInRange(innerRadius * 0.1, innerRadius * 0.4);\n\n    const { x, y } = middlePointCoordinate;\n    const angleRad = getRadians(middlePointAngle);\n    const xPosition = distanceFromMiddlePoint * Math.sin(angleRad) + x;\n    const yPosition = distanceFromMiddlePoint * Math.cos(angleRad) + y;\n\n    const angleOffset = (Math.atan(enemyRadius / distanceFromMiddlePoint) * 180) / Math.PI;\n\n    const min = middlePointAngle - angleOffset;\n    const max = middlePointAngle + angleOffset;\n\n    return {\n        xPosition,\n        yPosition,\n        enemyRadius,\n        middlePointAngle,\n        enemyAngleRange: [min, max],\n        enemyId: uniqueId('enemy-id='),\n        type,\n        enetityProperty: getEntityProperty(type)\n    };\n};\n","import { Entity, State, entityTypes, entityProperties } from '../../model/game.model';\nimport { changeDirectionCounterIncrement } from '../constants';\n\ntype EntityPerformerCb = (state: State) => void;\ntype EntitesPerformer = {\n    [property in entityProperties]: EntityPerformerCb;\n};\n\nexport const performExlporer = (state: State) => {\n    console.log('clean up');\n    state.entities = [];\n};\nexport const performCounterIncreaser = (state: State) => {\n    console.log('increment');\n    state.changeDirectionCounter = state.changeDirectionCounter + changeDirectionCounterIncrement;\n};\n\nexport const performEnemyFunctionality = () => {};\n\nconst entitiesPerformer: EntitesPerformer = {\n    [entityProperties.exploder]: performExlporer,\n    [entityProperties.counterIncreaser]: performCounterIncreaser,\n    [entityProperties.enemy]: performEnemyFunctionality\n};\n\nexport const performHelperFunctionality = (entites: Entity[], state: State) =>\n    entites.forEach(({ enetityProperty }: Entity) => entitiesPerformer[enetityProperty](state));\n","import {\n    Coordinate,\n    direction,\n    Entity,\n    State,\n    LoaderPostion,\n    entityTypes\n} from '../model/game.model';\nimport { getRadians } from '../helpers/radiant-transformer';\nimport { CanvasRenderer } from './renderer';\nimport { state } from './state';\n\nimport {\n    maxEnemiesCount,\n    maxDelayToAddEnemyInTicks,\n    maxDelayInactionsInTicks,\n    changeDirectionTriesMessage,\n    countOfEnemiesMessage,\n    countOfChangeDirectionTriesMessageCoordintate,\n    countOfEnemiesMessagePositionCoordinate,\n    helperGeneratorChance\n} from './constants';\nimport { getLoaderDataBasedOnCurrentLoaderCounterPosition } from './calculation/rest-range.calculation';\nimport { createEntity } from './calculation/entity.calculation';\nimport { performHelperFunctionality } from './calculation/helper-entity.calculation';\n\nconst { clockwise, сСlockwise } = direction;\nconst domRectList = document.body.getClientRects();\nconst { width, height } = domRectList[0];\n\nconst canvasSize = width > height ? height : width;\nconst canvasMiddlePosition = canvasSize / 2;\nconst radius = canvasMiddlePosition * 0.9;\nconst innerRadius = radius / 3;\n\nconst canvasMiddlePoint: Coordinate = {\n    x: canvasMiddlePosition,\n    y: canvasMiddlePosition\n};\n\nconst { x, y } = canvasMiddlePoint;\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\nconst canvasRenderer = new CanvasRenderer(\n    ctx,\n    radius,\n    innerRadius,\n    canvasSize,\n    getRadians,\n    canvasMiddlePoint\n);\n\nlet pointerDirection = clockwise;\n\nconst setDocumentListener = (listener: () => void) => {\n    document.addEventListener('click', listener);\n    document.addEventListener('keydown', listener);\n};\nconst drowPointer = (angle: number) => {\n    const angleRad = getRadians(angle);\n    const xPosition = radius * Math.sin(angleRad) + x;\n    const yPosition = radius * Math.cos(angleRad) + y;\n\n    canvasRenderer.drowPointer(xPosition, yPosition);\n};\n\nconst getUpdatedAngle = (updatedAngle: number, direction: number) => {\n    return direction === clockwise\n        ? updatedAngle <= 0\n            ? 360\n            : updatedAngle\n        : updatedAngle >= 360\n        ? 0\n        : updatedAngle;\n};\n\nconst performPointerItaration = () => {\n    const { angle } = state;\n    drowPointer(state.angle);\n    state.angle = getUpdatedAngle(angle + pointerDirection, pointerDirection);\n};\n\nconst hasNoEnemies = ({ entities }: State) =>\n    !entities.find(({ type }: Entity) => type === entityTypes.enemy);\nconst hasLessEnemiesToMax = ({ entities }: State) => entities.length < maxEnemiesCount;\nconst isDirectionCounterEmpty = ({ changeDirectionCounter }: State) => !changeDirectionCounter;\n\nconst addNewEnemy = (entity: Entity) => (state.entities = [...state.entities, entity]);\n\ntype GetRandomEntityType = () => entityTypes;\nconst getRandomEntityType: GetRandomEntityType = () =>\n    Math.random() > helperGeneratorChance ? entityTypes.enemy : entityTypes.helper;\n\nconst addNewEntityWithPassedValidator = (\n    shouldAddNewEnemyValidator: (state: State) => boolean,\n    state: State,\n    angle: number,\n    type: entityTypes\n) => {\n    if (shouldAddNewEnemyValidator(state)) {\n        addNewEnemy(createEntity(angle, innerRadius, radius, canvasMiddlePoint, type));\n    }\n};\n\nconst updateEntities = (angle: number, type: entityTypes) => {\n    addNewEntityWithPassedValidator(hasNoEnemies, state, angle, type);\n    canvasRenderer.drowEntities(state.entities);\n};\n\nconst addEntity = (angle: number, type: entityTypes) => {\n    addNewEntityWithPassedValidator(hasLessEnemiesToMax, state, angle, type);\n};\n\nconst drowCounterMessageWithLoader = (\n    staticPrefixMessage: string,\n    dynamicValue: number,\n    useSpecificColor: boolean,\n    textPositionCoordintate: Coordinate,\n    loaderPosition: LoaderPostion\n) => {\n    const messageWithCounter = `${staticPrefixMessage} ${dynamicValue}`;\n    const specificTextColor = useSpecificColor ? 'red' : null;\n\n    canvasRenderer.drowText(messageWithCounter, textPositionCoordintate, specificTextColor);\n    canvasRenderer.drowLoader(\n        textPositionCoordintate,\n        getLoaderDataBasedOnCurrentLoaderCounterPosition(loaderPosition)\n    );\n};\n\nconst drowTextMessagesWithLoader = (state: State) => {\n    drowCounterMessageWithLoader(\n        changeDirectionTriesMessage,\n        state.changeDirectionCounter,\n        isDirectionCounterEmpty(state),\n        countOfChangeDirectionTriesMessageCoordintate,\n        {\n            position: state.countOfTicksWithoutEnemyDestory,\n            maxPosition: maxDelayInactionsInTicks\n        }\n    );\n    drowCounterMessageWithLoader(\n        countOfEnemiesMessage,\n        state.entities.length,\n        !hasLessEnemiesToMax(state),\n        countOfEnemiesMessagePositionCoordinate,\n        {\n            position: state.tickCounter,\n            maxPosition: maxDelayToAddEnemyInTicks\n        }\n    );\n};\n\nconst validateEntitiesCounts = (angle: any, getRandomEntityType: GetRandomEntityType) => {\n    state.tickCounter = state.tickCounter + 1;\n\n    if (state.tickCounter >= maxDelayToAddEnemyInTicks) {\n        state.tickCounter = 0;\n        addEntity(angle, getRandomEntityType());\n    }\n};\n\nconst validateTicksWithoutDestroy = () => {\n    state.countOfTicksWithoutEnemyDestory = state.countOfTicksWithoutEnemyDestory + 1;\n};\n\nconst cleanUpTicksWithoutEnemyDestroy = (isEnemyInRange: boolean) => {\n    if (isEnemyInRange) {\n        state.countOfTicksWithoutEnemyDestory = 0;\n    }\n};\n\nconst updateChangeDirectionCounter = (diff: number) => {\n    state.changeDirectionCounter = state.changeDirectionCounter + diff;\n\n    if (state.changeDirectionCounter < 0) {\n        state.changeDirectionCounter = 0;\n    }\n};\n\nconst reduceChangeDirectionCounterOnLongPending = () => {\n    if (state.countOfTicksWithoutEnemyDestory > maxDelayInactionsInTicks) {\n        cleanUpTicksWithoutEnemyDestroy(true);\n        updateChangeDirectionCounter(-1);\n    }\n};\n\nconst startGame = () => {\n    setInterval(() => {\n        canvasRenderer.canvasCleanUp();\n        canvasRenderer.drowStaticGameField();\n\n        validateEntitiesCounts(state.angle, getRandomEntityType);\n        validateTicksWithoutDestroy();\n        reduceChangeDirectionCounterOnLongPending();\n\n        updateEntities(state.angle, entityTypes.enemy);\n\n        performPointerItaration();\n\n        drowTextMessagesWithLoader(state);\n    }, 10);\n};\n\nconst validateChangeDirectionCounter = (isEnemyInRange: boolean) => {\n    const { changeDirectionCounter } = state;\n    const shouldNotReduceCounter = !isEnemyInRange && changeDirectionCounter === 0;\n\n    if (shouldNotReduceCounter) {\n        return;\n    }\n\n    const diff = isEnemyInRange ? 1 : -1;\n    updateChangeDirectionCounter(diff);\n};\n\nconst getUpdatedEnemyStatus = () => {\n    if (!state.entities.length) {\n        return false;\n    }\n\n    const { angle } = state;\n    const enemiesInRange = state.entities.filter(({ enemyAngleRange: [min, max] }: any) => {\n        const validatedAngle = angle === 360 ? 0 : angle;\n        const isEnemyInRange = validatedAngle > min && validatedAngle < max;\n\n        return isEnemyInRange;\n    });\n    const enemiedIfInRange = enemiesInRange.map(({ enemyId }: any) => enemyId);\n\n    let isEnemyInRange = false;\n\n    performHelperFunctionality(enemiesInRange, state);\n\n    if (enemiesInRange.length) {\n        state.entities = state.entities.filter(\n            (enemy: any) => !enemiedIfInRange.some((enemyId: number) => enemyId === enemy.enemyId)\n        );\n\n        isEnemyInRange = true;\n    }\n\n    return isEnemyInRange;\n};\n\nconst changePointerDirection = () => {\n    const isEnemyInRange = getUpdatedEnemyStatus();\n    const { changeDirectionCounter } = state;\n    if (changeDirectionCounter || isEnemyInRange) {\n        pointerDirection = pointerDirection === clockwise ? сСlockwise : clockwise;\n    }\n\n    cleanUpTicksWithoutEnemyDestroy(isEnemyInRange);\n    validateChangeDirectionCounter(isEnemyInRange);\n};\n\nlet isGameStarted: boolean = false;\nconst addListenerToStartGame = (listener: () => void) => {\n    const button = document.getElementById('button');\n\n    if (!button) {\n        return;\n    }\n\n    button.addEventListener('keydown', event => event.preventDefault());\n    button.addEventListener('click', () => {\n        if (!isGameStarted) {\n            isGameStarted = true;\n            listener();\n            document.body.focus();\n        }\n    });\n};\nsetDocumentListener(changePointerDirection);\n\naddListenerToStartGame(startGame);\n","import './src/game/';\n"]}