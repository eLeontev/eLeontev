{"version":3,"sources":["src/model/game.model.ts","src/helpers/radiant-transformer.ts","src/game/constants.ts","src/game/renderer.ts","src/game/state.ts","node_modules/lodash.uniqueid/index.js","src/helpers/randomizer.ts","src/game/calculation/enemy.calculation.ts","src/game/calculation/rest-range.calculation.ts","src/game/index.ts","index.ts"],"names":[],"mappings":";AKAA;AACA;AACA;AACA;AACA,AHFa,AFeb,IAAY,GEfC,CAAA,KFeb,aEfa,GAAqB,GAArB;AQFb,ALKA,AGLA,ANGa,ACDb,ACFA,AHCa,AKDA,IEAb,ALEA,ACFA,GMAA,ARGa,ADFA,AKDA,CIAb,ARGa,ADFA,AKDA,OEAb,ALEA,ACFA,GIAA,ALEA,ACFA,AHCa,GSDb,ATC0B,CSD1B,GFAA,ALEA,ACFA,CIAA,ANGa,ACDb,ACFA,EEAa,CJGqB,EAArB,ADFc,AKDS,OLCV,CEC1B,ACFA,CIAA,ALEA,ACFA,AHC0C,COD1C,AFAqC,GAAD,EAAc,GAAd,EAAyB;ADM7D,AHFa,ADHkC,AKA3C,ANgBJ,CAAA,MEba,CAAA,CDHmC,AKA5C,ENgBQ,EChBwC,AKA5C,CLA6C,AKA5C,ELAuC,GAAU,AKAtD,CAAW,ANgBf,EChB+C,ADgB1B,CEbR,AIHK,ELA+C,CCGlC,AIHV,EJGR,EIHY,CAAC,CLAqB,KKA1B,MAAiB,GAAG,GAAG,CAAN,GAAU,GAA3B,CAAjB,CAAA;ADMJ,AGJA,ANGa,ACFb,ACDa,AHF2D,AKAnB,ANiBjD,CCjBS,AKDA,CNkBT,EQfE,ALCN,GDEa,AEHA,CFGA,AEHA,GJeT,CAAA,CIfS,GAAe,EDC5B,GKDuB,ARenB,CAAA,EQfsB,SAApB,ANGO,AFYT,CAAA,EEZqC,CFYrC,CAAA,CEZS,AFYT,CAAA,GAAA,OQfsB,CAAC,GAAD,ARetB,EQfkC;AHKtC,AGLmD,ANItC,ACHb,ACAI,AJeA,EIfA,AJeA,KEZS,CAAA,CMJsC,AJCxC,EAAE,AJeT,CAAA,CIhBwB,IIA+B,CAAC,GAAD,ARgBvD,CAAA,CQhB6D,EAAN,CAAR,MNItC,GAA2B,GAA3B,MFYT,CAAA,GAAA,CAAA,CAAA,GAAA,sBAAA;AKVJ,AGNoE,ANMvD,ACLb,ACCI,AJeH,CQjBD,ARcA,CIZI,CJYQ,IERC,CAAA,ICLb,AHaqB,CIZN,EAAE,AJYL,CIdgB,MJchB,CAAA,SAAA,GERC,EFQD,CER+B,MFQ/B,CAAA,SAAA,GAAS,CERR,CFQD,CAAZ;AKPA,AHAa,ACWT,ACfA,EAAA,KFIS,CAAA,GCWT,cAAA,CACY,GDZH,GAAwB,CEJF,EDe/B,ACfiC,CAHT,CDoBZ,MAFZ,EAGY,MDdH,KCWT,EAIY,UAJZ,EAKI,UALJ,EAMI,iBANJ,EAMiC;AEhBrC,AEXA,ACIA,ANQa,ACUG,ACfZ,EAAA,EGPJ,ACIM,GNQO,CAAA,CCUG,SAAA,CDVH,EKZb,ACIuB,ALkBP,CDVW,EKZ3B,ACI0B,AJGA,CFKb,CELe,CAJA,GDmBZ,GKlBV,MDJN,CAAA,OAAA,CAAA,ECI0B,CAAC,GAAD,EAAY,SDJtC,CAAA,CAAA;AFYA,AGRmD,ANStC,ACUG,ACfZ,EAAA,KFKS,AELJ,CFKI,CMTsC,ALmBnC,ACfL,GIJ2C,CAAC,ELmBvC,GAAA,EDVH,AELF,CIJwC,AJIxC,CIJqD,CNSpC,CMTuB,ALmBnC,CKnBmC,ANStC;AGAb,AEVA,ACCmE,ANUtD,ACUG,ACrBY,CIC5B,AJDa,GGAb,GLWa,CAAA,CCUG,MIrBhB,GAAA,EJqBgB,GAAA,EIrBhB,CAAA,ELWa,GAAuB,CAAvB,ECUG,MIrBhB,CAAA;AFWA,AHCa,ACUG,ODVH,CAAA,CCUG,UAAA,GDVH,ACUG,GDVc,OCUd,CDVH;AGAb,AEXA,ACCA,ANWa,ACXQ,IIDrB,ACCM,GNWO,CAAA,CCXQ,SKAD,GAAG,CNWV,GKZb,ALY8B,CCXT,EIDrB,CJCiD,CKA3C,ALAe,GDWR,EKZb,CAAA,QCCuB,CAAC,GAAD,EAAY,qBDDnC,CAAA;AFYA,AGXgD,ANanC,ACVQ,ODUR,CAAA,CMbmC,ALG3B,MKH+B,GAAG,CAAC,MLGnC,EKH+B,CAAa,ALGjB,CKHI,ALG/B,EKH+C,GAAhB,CAAJ,kBNanC,GAA4D;AGDzE,AEZA,ACA0E,ANctE,ACViB,CKJrB,CNcI,CAAC,CKdL,CLcO,EADkE,ECTpD,OIJrB,GAAA,MJIqB,CIJrB,CAAA,CJIgD,CAA3B,wBIJrB,CAAA;AFaA,AHEI,ACViB,EDUjB,CAAC,EAAE,ICVc,eAAA,GAAkC,OAAlC;AESrB,AEZa,ACAb,ANWyE,AOlBzE,ANeqB,CDGR,GMXP,ACPN,GFOa,CAAA,CJQQ,OMfrB,GFOa,AEPb,GFO2B,GCAA,CCP3B,CAAA,CDO8B,IDC1B,AJOiB,GAAkC,EIR5B,ACArB,EDEF,GJMiB,MMfrB,CAAA,CFO2B,EAGvB,MAHuB,ACAG,CAAC,CDI3B,OCJ0B,EAAmB,WAAnB,CDAH,CCAyC,CDI/B;AFSrC,AEPI,ACLA,ANeS,ACPD,MIHF,CLUG,CAAA,CMfT,ALQQ,QKRA,GAAG,EDKW,GAAG,IAAI,CAAC,CCL9B,ALQQ,EIHiB,CAAS,AJGO,KIHF,EJG/B,CIHkC,GAAjB,ELUhB,EKVwC,CLUc,UKVd,CAAA,kBAAjD;AFQJ,AEPI,ACNsB,ANgBtB,AOvBJ,ANgBY,CKVZ,CNiBI,CAAC,COvBL,CPuBO,CKVG,CLSyD,ECNvD,aIHc,GAAG,AEb7B,GAAA,ENgBY,GAAgC,EMhB5C,CAAA,ENgBY,GIHiC,GAAG,GAAnB,GAAyB,WAAA,CAAA,MEbtD,CAAA,WFaI;AFQJ,AENI,ALSA,ACPQ,EDOR,CAAC,EAAE,CKTG,GJEE,aIFc,GAAG,CJEjB,GAA4B,MAA5B,EIFiB,CAAA,oBAAA,CAAqB,WAAA,CAAA,kBAArB,EAAyC,gBAAzC,IAA6D,GAAtF;AFOJ,AENI,ACRJ,ANcmE,AOrBnE,ANiBY,CDIC,GMdP,ACPN,EFeU,GJEE,KMjBZ,GAAA,OAAA,CAAA,ANiBY,GAA2B,CIFN,GAAG,ECRA,CLUxB,EKV2B,ACPvC,CAAA,MFeoC,CAAA,CCR9B,mBDQ8B,CAAqB,UCRlB,CDQH,ACRI,EDQ8B,MAAM,ECRrC,CDQwC,CCRnB,EDQxB,CAAhC,ACRmC,EAAkC,GAAlC,EAA6C;AHepF,AENI,ACRA,ALmBI,MIXE,GCRN,ALmBS,QIXQ,ECRP,CDQU,GCRN,CLmBV,EKnBa,CLmBU,EKnBP,GDQA,ACRV,CDQU,ACRpB,GAA2B,CLmBU,CAAC,CKnBtC,ELmBqC,CAAjC,WIXgB,CAAqB,WAAW,GAAG,GAAnC,EAAwC,WAAW,GAAG,GAAtD,CAApB;AFOJ,AELY,ACVsB,ACPlC,AN4BgB,CKtBhB,GCNA,EFiBY,CAAA,CJWI,CAAA,CIXJ,CEjBZ,CN4BgB,EM5BhB,OAAA,CAAA,ON4BgB,CAAA,CIXJ,AEjBZ,AN4BgB,CIXJ,AEjBZ,CFiBY;AFMZ,AENY,AJWI,MIXD,CAAA,CJWI,CAAA,CIXJ,EJWI,iBAAA,CAAA,CIXJ,AJWC,CIXD,CAAH;AFOZ,AENI,ACTE,ACRN,AN4BQ,IKpBF,ACRN,EFiBU,ACTJ,GAAA,ALoBO,CKpBP,IDSY,GAAG,MEjBrB,GAAA,AN4BQ,CKpBF,CAAA,CLoB2B,CAAzB,GM5BR,CAAA,IFiBqB,CAAA,ACTf,CAAA,SDSe,CAAW,ICT1B,CAAA,EAAA,SDSe,CAAjB,AEjBJ,CAAA,MDQM,CAAA,WAAA,CAAA,cAAA,CAAA,CAAA;AHgBN,AENI,ACVE,ALqBE,IKrBD,EDUG,CCVH,ELqBM,CKrBN,EAAA,CAAA,CAAA,CDUY,ACVb,GDUgB,QJWd,GAAyB,CAAzB,WIXqC,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAA1B,GAA+C,CAAjE;AFOJ,AENI,ACXE,ACPN,AN8BQ,IKvBI,ACPZ,EFkBU,CCXE,ELuBC,CKvBD,EAAA,CAAA,CAAA,CDWO,ACXb,ACPN,GFkBsB,AElBtB,CN8BQ,MM9BR,CAAA,aAAA,CAAA,CFkB6C,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAA1B,GAA+C,CAAjE;AFOJ,AELI,AJWC,MIXK,WAAW,GAAI,IAAI,CAAC,IAAL,CAAU,WAAW,GAAG,uBAAxB,IAAmD,GAApD,GAA2D,IAAI,CAAC,EAApF;AFMJ,AEJI,ACbS,ACAb,IAAA,EFaU,CCbG,CAAA,CDaA,GAAG,gBAAgB,AEbhC,GFamC,AEbnC,OAAA,CAAA,GFaI,cCbS,GAAmD,UAAC,EAAD,EAGhD,ICHhB,CAAA;AJkBA,AEJI,AJUO,EAAA,IIVD,ACbN,GDaS,GAAG,ECbZ,ELuBO,CKvBP,ALuBO,EKvBP,CAAA,MLuBO,CAAA,CIVqB,GAAG,WAA/B,IJUO,GAAP,YAAA;AELJ,AEHI,AEdI,ANsBJ,IMtBI,EDAJ,ELsBA,CIRO,IEdH,ANsBJ,GMtBI,ANsBJ,CKtBA,GAAA,ALsBA,EKtBA,CAAA,KCAI,CAAA,SAAA,CAAA,SAAA;AJkBR,AEHQ,ACbJ,ACFI,IFeA,AEfW,EDET,ODaO,CEfE,CFeF,EEfE,OFcR,CCZkB,GAAG,CCFb,CAAA,SAAA,CAAA,SDEkC,CAAC,ACF9C,QDE6C,EAAW,WAAX,CAAjD;AHiBJ,AEHQ,ACbJ,ACFJ,ANsBQ,IIPA,AEfF,CNsBG,CKpBC,ILoBI,GIPG,EAAA,AEfA,GAAG,GNsBZ,CKpBkB,CLoBC,CIThB,CCXkB,CCFD,CAAC,CNsBG,GMtBZ,CAAc,ENsB1B,EAAgC,OAAhC,CAAwC,EMtB5B,EAApB,MNsBiD,CKpBU,CAAC,ILoBZ,EAAe,aKpBJ,EAAsB,GAAtB,EAA2B,GAA3B,CAAvD;AHiBJ,AEHQ,ACZJ,ACHE,ANqB8D,IIN5D,AEfF,EAAA,GDGK,ACHL,INqB8D,EINjD,EAAA,CJMqD,CAAC,CMrBnE,CAAA,CAAA,CAAA,KFYK,QJSyD,CAAuB,MAAvB,CAAA;AEFpE,AEHQ,ACZA,ACJF,ANqB4F,IIL1F,ACZA,ACJA,CNqBA,IKjBK,ACJL,EDIO,CCJP,EAAA,CAAA,KFgBgB,AEhBlB,EFgBkB,QCZU,GAAG,KDQ1B,MCR0B,CAAA,WAD1B;AHiBX,AEHQ,ACZA,ACLF,ANsBD,GAFM,CIHH,ACZA,ACLO,KDKF,CCLE,CDKA,ECLA,EAAA,CAAA,GFiBQ,EAAE,CAAC,AEjBpB,GFiBmB,ACZI,CAAC,CDYC,GAAN,CALd,YCPoC,CAAC,gBAAD,CAAlB;AHgB7B,AEHQ,ACfG,ACDX,GDCI,CDeI,AEhBF,OFgBS,EAAE,CEhBD,GAAG,KAAK,GAAG,KFgBV,CAAA,AEhBE,GAAiB,IFgBnB,CAAS,CEhBP,GAA0B,KAA7C,EFgBiB;AFIjB,AEVW,ACLV,ACJD,ANqBW,CK5BE,CL4BF,CIZP,CETE,YNqBK,CAAA,OMrBe,ENqBf,CMrBkB,ANqBlB,SAAA,CMrB4B,ENqBnC,CMrBsC,CAA1C,QNsBQ,MADJ,EAEI,CAFJ,EAGI,CAHJ,EAII,gBAJJ,EAIyD;AEL7D,AEHC,AEhBD,ANwBQ,CIvCK,GEeP,INwBE,EMxBI,GAAG,WNwBP,KAAA,IMxB2B,CNwB3B,CAAA,CMxB8B,CNwB9B,EMxBR;AJoBA,AInBA,ANuBQ,IMvBF,ENuBE,SMvBS,GAAG,INuBZ,EMvBkB,CNuBS,EMvBN,CAA7B,ENuBwC,qBAAhC;AEHR,AIlBA,ANqB6D,IMrBvD,iBAAiB,GA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D,EAEI,EAFJ,EAGI,UMLyB,CAA7B,MNEA,EAGoC;AEFxC,AIFC,CAJD,ONOU,CAAA,GAAA,EAAA,CAAA;AEAV,QFAa,CAAA,GAAA,EAAA,CAAA;AECb,AIFA,ANIQ,IMJF,KNIO,OMJK,ENIV,CMJa,ANIE,IAAf,GAAsB,EMJxB,UNIE,EMJa,CAAC,EAAD,EAAmB;AJGxC,AFEQ,MMLgB,GNKX,IMLW,GAAA,EAAA,ANKhB,CMLgB,ANKD,SAAf,GAA2B,iBAAiB,IAAI,KAAK,gBAArD;AEDR,AIJ6C,ANMrC,SMNqC,ANMhC,CMNiC,OAAO,CAAC,ANM9C,CAAe,KMNsB,GNMrC,CAAwB,kBAAxB,EAA4C,CAA5C,EAA+C,CAA/C;AEDR,AIL4D,ANOvD,CMPL,ENDW;AEOX;AACA,AINA,ANQW,EAAA,EMRL,YNQK,CAAA,MMRc,GAAG,ANQjB,CAAA,QMRL,ENQK,GAAP,UAAkB,EAAlB,EMRwB,ANQgB,CMRf,CNQzB,CMRwB,CNQ4C,CMRzB;AJO/C,MIP+B,ENQP,CAAA,GAAA,CMRO,CNQP,CAAA,CMRO,EAAA,CAAA;AJQ/B,AIRoD,QNQzB,CMRyB,ANQzB,GAAA,EAAA,CAAA,CMRgC,CAAC,MAAR,GAAiB,WAAA,CAAA,eAAjB;AJSpD,AIToF,CAApF,ONQ8C,KAAA,GAAA,EAAA,CAAA;AEE9C,QFFqD,KAAA,GAAA,EAAA,CAAA;AEGrD,AIVA,ANQQ,IMRF,INQQ,WAAW,GAAG,CAAC,GAAG,CMRH,GAAG,ONQA,CAAA,CMR1B,mBNQE,IMRwB,CAAC,EAAD,EAAkC;AJWlE,AFDQ,MMV2B,GNUtB,SAAL,CAAe,SMVY,ANU3B,GMV2B,EAAA,CAAA;AJYnC,AIZuE,ANW/D,SMX+D,ANW1D,CMX2D,QNWhE,CAAe,SAAf,GAA2B,CMXoC,INW/D;AEER,AIb8F,ANYtF,CMZR,QNYa,SAAL,CAAe,QAAf,CAAwB,CAAxB,EAA2B,WAA3B,EAAwC,KAAxC,EAA+C,WAAA,CAAA,YAA/C;AEER,AFAQ,SAAK,SAAL,CAAe,SAAf;AECR,AIbA,ANaQ,IMbF,KNaO,MMbI,GAAG,ANaZ,CAAe,QMbjB,GNaE,GAA6B,KMbjB,ANasB,C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","file":"game_touch.77de5100.js","sourceRoot":"..","sourcesContent":["export interface Game {\n    name: string;\n    level: number;\n    score: number;\n}\n\nexport interface Coordinate {\n    x: number;\n    y: number;\n}\n\nexport interface Field {\n    radius: number;\n    backgroundColor: number;\n    middleCoordinate: Coordinate;\n}\n\nexport enum direction {\n    clockwise = -1,\n    сСlockwise = 1\n}\n\nexport interface Pointer {\n    direction: direction;\n    color: string;\n    angle: number;\n}\n\nexport interface Switcher {\n    rootAngle: number;\n    offsets: number;\n}\n\nexport interface Enemy {\n    xPosition: number;\n    yPosition: number;\n    enemyRadius: number;\n    middlePointAngle: number;\n    enemyAngleRange: Array<number>;\n    enemyId: number;\n}\n\nexport interface State {\n    enemies: Array<Enemy>;\n    tickCounter: number;\n    countOfTicksWithoutEnemyDestory: number;\n    changeDirectionCounter: number;\n    angle: number;\n}\n\nexport interface LoaderData {\n    width: number;\n    color: string;\n}\n\nexport interface LoaderPostion {\n    position: number;\n    maxPosition: number;\n}\n","export type GetRadians = (degrees: number) => number;\nexport const getRadians = (degrees: number) => (Math.PI / 180) * degrees;\n","import { Coordinate } from '../model/game.model';\n\nexport const startAnglePosition = 179;\nexport const minimumEnemyOffset = 20;\nexport const maxEnemiesCount = 10;\n\nexport const maxDelayToAddEnemyInTicks = 360;\nexport const maxDelayInactionsInTicks = 180;\n\nexport const changeDirectionTriesMessage = 'direction counter:';\nexport const countOfEnemiesMessage = 'count of enemies:';\n\nexport const loaderWidth = 200;\nexport const loaderHeight = 15;\nexport const verticalLoaderOffset = 7;\nexport const loaderMinColor = '00ff00';\nexport const loaderMaxColor = 'ff0000';\n\nexport const countOfChangeDirectionTriesMessageCoordintate: Coordinate = {\n    x: 10,\n    y: 85\n};\n\nexport const countOfEnemiesMessagePositionCoordinate: Coordinate = {\n    x: 10,\n    y: 40\n};\n","import { Enemy, Coordinate, LoaderData } from '../model/game.model';\nimport { GetRadians } from '../helpers/radiant-transformer';\nimport { loaderHeight, loaderWidth, verticalLoaderOffset } from './constants';\n\nexport class CanvasRenderer {\n    private readonly defaultStartAngle: number = 0;\n    private readonly defaultEndAngle: number;\n\n    private readonly defaultLineWidth: number = 1;\n    private readonly pointerLineWidth: number = 4;\n    private readonly defaultLineJoin: CanvasLineJoin = 'round';\n\n    private readonly middleXCoordinate: number;\n    private readonly middleYCoordinate: number;\n\n    private readonly defaultStrokeStyleColor: string = 'black';\n    private cleanUpBackgroundColor: string = 'white';\n    private enemyStrokeStyleColor: string = 'red';\n    private pointerStyleColor: string = 'blue';\n    private defaultTextColor: string = 'black';\n\n    constructor(\n        private canvasCtx: CanvasRenderingContext2D,\n        private radius: number,\n        private innerRadius: number,\n        private canvasSize: number,\n        getRadians: GetRadians,\n        canvasMiddlePoint: Coordinate\n    ) {\n        this.defaultEndAngle = getRadians(360);\n\n        const { x, y } = canvasMiddlePoint;\n        this.middleXCoordinate = x;\n        this.middleYCoordinate = y;\n\n        this.initCanvas();\n    }\n\n    public drowStaticGameField() {\n        [this.innerRadius, this.radius].forEach((radius: number) => this.drowStrokedCircle(radius));\n    }\n\n    public drowEnemy(\n        radius: number,\n        x: number,\n        y: number,\n        strokeStyleColor: string = this.enemyStrokeStyleColor\n    ) {\n        this.drowStrokedCircle(radius, x, y, strokeStyleColor);\n    }\n\n    public canvasCleanUp() {\n        this.canvasCtx.beginPath();\n        this.canvasCtx.fillStyle = this.cleanUpBackgroundColor;\n        this.canvasCtx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n    }\n\n    public drowEnemies(enemies: Enemy[]) {\n        enemies.forEach(({ xPosition, yPosition, enemyRadius }: Enemy) =>\n            this.drowEnemy(enemyRadius, xPosition, yPosition)\n        );\n    }\n\n    public drowPointer(xPosition: number, yPosition: number) {\n        this.canvasCtx.beginPath();\n        this.setPathView(this.pointerStyleColor, this.pointerLineWidth, this.defaultLineJoin);\n\n        this.canvasCtx.moveTo(this.middleXCoordinate, this.middleYCoordinate);\n        this.canvasCtx.lineTo(xPosition, yPosition);\n\n        this.canvasCtx.stroke();\n    }\n\n    public drowText(\n        messageWithCounter: string,\n        { x, y }: Coordinate,\n        specificTextColor: string | null\n    ) {\n        this.canvasCtx.font = '25px Arial';\n        this.canvasCtx.fillStyle = specificTextColor || this.defaultTextColor;\n        this.canvasCtx.fillText(messageWithCounter, x, y);\n    }\n\n    public drowLoader({ x, y }: Coordinate, { width, color }: LoaderData) {\n        const yWithOffset = y + verticalLoaderOffset;\n\n        this.canvasCtx.beginPath();\n        this.canvasCtx.fillStyle = color;\n        this.canvasCtx.fillRect(x, yWithOffset, width, loaderHeight);\n\n        this.canvasCtx.beginPath();\n        this.canvasCtx.strokeStyle = this.defaultStrokeStyleColor;\n        this.canvasCtx.strokeRect(x, yWithOffset, loaderWidth, loaderHeight);\n    }\n\n    private drowStrokedCircle(\n        radius: number,\n        x: number = this.middleXCoordinate,\n        y: number = this.middleYCoordinate,\n        strokeStyleColor: string = this.defaultStrokeStyleColor,\n        lineWidth: number = this.defaultLineWidth,\n        startAngle: number = this.defaultStartAngle,\n        endAngle: number = this.defaultEndAngle,\n        lineJoin: CanvasLineJoin = this.defaultLineJoin\n    ) {\n        this.canvasCtx.beginPath();\n        this.setPathView(strokeStyleColor, lineWidth, lineJoin);\n\n        this.canvasCtx.arc(x, y, radius, startAngle, endAngle);\n        this.canvasCtx.stroke();\n    }\n\n    private initCanvas() {\n        this.canvasCtx.canvas.width = this.canvasSize;\n        this.canvasCtx.canvas.height = this.canvasSize;\n        this.canvasCtx.canvas.style.backgroundColor = this.cleanUpBackgroundColor;\n    }\n\n    private setPathView(strokeStyleColor: string, lineWidth: number, lineJoin: CanvasLineJoin) {\n        this.canvasCtx.strokeStyle = strokeStyleColor;\n        this.canvasCtx.lineWidth = lineWidth;\n        this.canvasCtx.lineJoin = lineJoin;\n    }\n}\n","import { startAnglePosition } from './constants';\nimport { State } from '../model/game.model';\n\nexport const state: State = {\n    enemies: [],\n    tickCounter: 0,\n    countOfTicksWithoutEnemyDestory: 0,\n    changeDirectionCounter: 5,\n    angle: startAnglePosition\n};\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","export const randomIntegerInRange = (min: number, max: number): number =>\n    Math.floor(min + Math.random() * (max + 1 - min));\n","import uniqueId from 'lodash.uniqueid';\n\nimport { Enemy, Coordinate } from '../../model/game.model';\nimport { minimumEnemyOffset } from '../constants';\nimport { getRadians } from '../../helpers/radiant-transformer';\nimport { randomIntegerInRange } from '../../helpers/randomizer';\n\nexport const createEnemy = (\n    angle: number,\n    innerRadius: number,\n    radius: number,\n    middlePointCoordinate: Coordinate\n): Enemy => {\n    const minEnemyPosition = Math.abs(angle % 360) + minimumEnemyOffset;\n    const maxEnemyPosition = minEnemyPosition + 360 - minimumEnemyOffset;\n\n    const middlePointAngle = randomIntegerInRange(minimumEnemyOffset, maxEnemyPosition) % 360;\n    const distanceFromMiddlePoint = randomIntegerInRange(innerRadius, radius * 0.9);\n    const enemyRadius = randomIntegerInRange(innerRadius * 0.1, innerRadius * 0.4);\n\n    const { x, y } = middlePointCoordinate;\n    const angleRad = getRadians(middlePointAngle);\n    const xPosition = distanceFromMiddlePoint * Math.sin(angleRad) + x;\n    const yPosition = distanceFromMiddlePoint * Math.cos(angleRad) + y;\n\n    const angleOffset = (Math.atan(enemyRadius / distanceFromMiddlePoint) * 180) / Math.PI;\n\n    const min = middlePointAngle - angleOffset;\n    const max = middlePointAngle + angleOffset;\n\n    return {\n        xPosition,\n        yPosition,\n        enemyRadius,\n        middlePointAngle,\n        enemyAngleRange: [min, max],\n        enemyId: uniqueId('enemy-id=')\n    };\n};\n","import { loaderMinColor, loaderMaxColor, loaderWidth } from '../constants';\nimport { LoaderData, LoaderPostion } from '../../model/game.model';\n\nconst transformHexToDec = (hex: string): number => parseInt(hex, 16);\nconst transformDecToHex = (dec: number): string => dec.toString(16);\nconst colorHexFormat = (hex: string): string => `#${hex.padStart(6, '0')}`;\n\nconst getPositionInPercents = (position: number, maxPosition: number): number =>\n    position / maxPosition;\nconst getValueBasedOnPercentsInRange = (percentage: number, min: number, max: number): number =>\n    percentage * (max - min) + min;\n\nconst [min, max] = [transformHexToDec(loaderMinColor), transformHexToDec(loaderMaxColor)];\n\nexport const getLoaderDataBasedOnCurrentLoaderCounterPosition = ({\n    position,\n    maxPosition\n}: LoaderPostion): LoaderData => {\n    const percentagesPosition = getPositionInPercents(position, maxPosition);\n    const decColorPosition = getValueBasedOnPercentsInRange(percentagesPosition, min, max);\n\n    return {\n        width: percentagesPosition * loaderWidth,\n        color: colorHexFormat(transformDecToHex(decColorPosition))\n    };\n};\n","import { Coordinate, direction, Enemy, State, LoaderPostion } from '../model/game.model';\nimport { getRadians } from '../helpers/radiant-transformer';\nimport { CanvasRenderer } from './renderer';\nimport { state } from './state';\nimport { createEnemy } from './calculation/enemy.calculation';\nimport {\n    maxEnemiesCount,\n    maxDelayToAddEnemyInTicks,\n    maxDelayInactionsInTicks,\n    changeDirectionTriesMessage,\n    countOfEnemiesMessage,\n    countOfChangeDirectionTriesMessageCoordintate,\n    countOfEnemiesMessagePositionCoordinate\n} from './constants';\nimport { getLoaderDataBasedOnCurrentLoaderCounterPosition } from './calculation/rest-range.calculation';\n\nconst { clockwise, сСlockwise } = direction;\nconst domRectList = document.body.getClientRects();\nconst { width, height } = domRectList[0];\n\nconst canvasSize = width > height ? height : width;\nconst canvasMiddlePosition = canvasSize / 2;\nconst radius = canvasMiddlePosition * 0.9;\nconst innerRadius = radius / 3;\n\nconst canvasMiddlePoint: Coordinate = {\n    x: canvasMiddlePosition,\n    y: canvasMiddlePosition\n};\n\nconst { x, y } = canvasMiddlePoint;\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\nconst canvasRenderer = new CanvasRenderer(\n    ctx,\n    radius,\n    innerRadius,\n    canvasSize,\n    getRadians,\n    canvasMiddlePoint\n);\n\nlet pointerDirection = clockwise;\n\nconst setDocumentListener = (listener: () => void) => {\n    document.addEventListener('click', listener);\n    document.addEventListener('keydown', listener);\n};\nconst drowPointer = (angle: number) => {\n    const angleRad = getRadians(angle);\n    const xPosition = radius * Math.sin(angleRad) + x;\n    const yPosition = radius * Math.cos(angleRad) + y;\n\n    canvasRenderer.drowPointer(xPosition, yPosition);\n};\n\nconst getUpdatedAngle = (updatedAngle: number, direction: number) => {\n    return direction === clockwise\n        ? updatedAngle <= 0\n            ? 360\n            : updatedAngle\n        : updatedAngle >= 360\n        ? 0\n        : updatedAngle;\n};\n\nconst performPointerItaration = () => {\n    const { angle } = state;\n    drowPointer(state.angle);\n    state.angle = getUpdatedAngle(angle + pointerDirection, pointerDirection);\n};\n\nconst hasNoEnemies = ({ enemies }: State) => !enemies.length;\nconst hasLessEnemiesToMax = ({ enemies }: State) => enemies.length < maxEnemiesCount;\nconst isDirectionCounterEmpty = ({ changeDirectionCounter }: State) => !changeDirectionCounter;\n\nconst addNewEnemy = (enemy: Enemy) => (state.enemies = [...state.enemies, enemy]);\n\nconst addNewEnemyWithPassedValidator = (\n    shouldAddNewEnemyValidator: (state: State) => boolean,\n    state: State,\n    angle: number\n) => {\n    if (shouldAddNewEnemyValidator(state)) {\n        addNewEnemy(createEnemy(angle, innerRadius, radius, canvasMiddlePoint));\n    }\n};\n\nconst updateEnemies = (angle: number) => {\n    addNewEnemyWithPassedValidator(hasNoEnemies, state, angle);\n    canvasRenderer.drowEnemies(state.enemies);\n};\n\nconst addEnemy = (angle: number) => {\n    addNewEnemyWithPassedValidator(hasLessEnemiesToMax, state, angle);\n};\n\nconst drowCounterMessageWithLoader = (\n    staticPrefixMessage: string,\n    dynamicValue: number,\n    useSpecificColor: boolean,\n    textPositionCoordintate: Coordinate,\n    loaderPosition: LoaderPostion\n) => {\n    const messageWithCounter = `${staticPrefixMessage} ${dynamicValue}`;\n    const specificTextColor = useSpecificColor ? 'red' : null;\n\n    canvasRenderer.drowText(messageWithCounter, textPositionCoordintate, specificTextColor);\n    canvasRenderer.drowLoader(\n        textPositionCoordintate,\n        getLoaderDataBasedOnCurrentLoaderCounterPosition(loaderPosition)\n    );\n};\n\nconst drowTextMessagesWithLoader = (state: State) => {\n    drowCounterMessageWithLoader(\n        changeDirectionTriesMessage,\n        state.changeDirectionCounter,\n        isDirectionCounterEmpty(state),\n        countOfChangeDirectionTriesMessageCoordintate,\n        {\n            position: state.countOfTicksWithoutEnemyDestory,\n            maxPosition: maxDelayInactionsInTicks\n        }\n    );\n    drowCounterMessageWithLoader(\n        countOfEnemiesMessage,\n        state.enemies.length,\n        !hasLessEnemiesToMax(state),\n        countOfEnemiesMessagePositionCoordinate,\n        {\n            position: state.tickCounter,\n            maxPosition: maxDelayToAddEnemyInTicks\n        }\n    );\n};\n\nconst validateEnemyCounts = (angle: any) => {\n    state.tickCounter = state.tickCounter + 1;\n\n    if (state.tickCounter >= maxDelayToAddEnemyInTicks) {\n        state.tickCounter = 0;\n        addEnemy(angle);\n    }\n};\n\nconst validateTicksWithoutDestroy = () => {\n    state.countOfTicksWithoutEnemyDestory = state.countOfTicksWithoutEnemyDestory + 1;\n};\n\nconst cleanUpTicksWithoutEnemyDestroy = (isEnemyInRange: boolean) => {\n    if (isEnemyInRange) {\n        state.countOfTicksWithoutEnemyDestory = 0;\n    }\n};\n\nconst updateChangeDirectionCounter = (diff: number) => {\n    state.changeDirectionCounter = state.changeDirectionCounter + diff;\n\n    if (state.changeDirectionCounter < 0) {\n        state.changeDirectionCounter = 0;\n    }\n};\n\nconst reduceChangeDirectionCounterOnLongPending = () => {\n    if (state.countOfTicksWithoutEnemyDestory > maxDelayInactionsInTicks) {\n        cleanUpTicksWithoutEnemyDestroy(true);\n        updateChangeDirectionCounter(-1);\n    }\n};\n\nconst startGame = () => {\n    setInterval(() => {\n        canvasRenderer.canvasCleanUp();\n        canvasRenderer.drowStaticGameField();\n        performPointerItaration();\n\n        validateEnemyCounts(state.angle);\n        validateTicksWithoutDestroy();\n        reduceChangeDirectionCounterOnLongPending();\n\n        updateEnemies(state.angle);\n        drowTextMessagesWithLoader(state);\n    }, 10);\n};\n\nconst validateChangeDirectionCounter = (isEnemyInRange: boolean) => {\n    const { changeDirectionCounter } = state;\n    const shouldNotReduceCounter = !isEnemyInRange && changeDirectionCounter === 0;\n\n    if (shouldNotReduceCounter) {\n        return;\n    }\n\n    const diff = isEnemyInRange ? 1 : -1;\n    updateChangeDirectionCounter(diff);\n};\n\nconst getUpdatedEnemyStatus = () => {\n    if (!state.enemies.length) {\n        return false;\n    }\n\n    const { angle } = state;\n    const enemiesInRange = state.enemies\n        .filter(({ enemyAngleRange: [min, max] }: any) => {\n            const validatedAngle = angle === 360 ? 0 : angle;\n            const isEnemyInRange = validatedAngle > min && validatedAngle < max;\n\n            return isEnemyInRange;\n        })\n        .map(({ enemyId }: any) => enemyId);\n\n    let isEnemyInRange = false;\n\n    if (enemiesInRange.length) {\n        state.enemies = state.enemies.filter(\n            (enemy: any) => !enemiesInRange.some((enemyId: number) => enemyId === enemy.enemyId)\n        );\n\n        isEnemyInRange = true;\n    }\n\n    return isEnemyInRange;\n};\n\nconst changePointerDirection = () => {\n    const isEnemyInRange = getUpdatedEnemyStatus();\n    const { changeDirectionCounter } = state;\n    if (changeDirectionCounter || isEnemyInRange) {\n        pointerDirection = pointerDirection === clockwise ? сСlockwise : clockwise;\n    }\n\n    cleanUpTicksWithoutEnemyDestroy(isEnemyInRange);\n    validateChangeDirectionCounter(isEnemyInRange);\n};\n\nlet isGameStarted: boolean = false;\nconst addListenerToStartGame = (listener: () => void) => {\n    const button = document.getElementById('button');\n\n    if (!button) {\n        return;\n    }\n\n    button.addEventListener('keydown', event => event.preventDefault());\n    button.addEventListener('click', () => {\n        if (!isGameStarted) {\n            isGameStarted = true;\n            listener();\n            document.body.focus();\n        }\n    });\n};\nsetDocumentListener(changePointerDirection);\n\naddListenerToStartGame(startGame);\n","import './src/game/';\n"]}