{"version":3,"sources":["src/model/game.model.ts","src/helpers/radiant-transformer.ts","src/game/constants.ts","src/game/renderer.ts","src/game/state.ts","src/game/calculation/rest-range.calculation.ts","node_modules/lodash.uniqueid/index.js","src/helpers/randomizer.ts","src/game/calculation/entity.calculation.ts","src/game/index.ts","index.ts"],"names":[],"mappings":";AMAA;AACA;AACA;AACA;AACA,AJFa,AFeb,IAAY,GEfC,CAAA,KFeb,aEfa,GAAqB,GAArB;AQFb,AJKA,ADLA,AHGa,AEHb,AHCa,AMDA,IFAb,ADAA,GMAA,ARGa,ADFA,AMDA,CGAb,ARGa,ADFA,AMDA,OFAb,ADAA,GCAA,ADAA,AHCa,GSDb,ATC0B,CSD1B,GLAA,ADAA,CCAA,AHGa,AEHb,EGAa,CLGqB,EAArB,ADFc,AMDS,ONCV,CGD1B,CCAA,ADAA,AHC0C,CID1C,AEAqC,GAAD,EAAc,GAAd,EAAyB;ADM7D,AJFa,ADHkC,AMA3C,APgBJ,CAAA,MEba,CAAA,CDHmC,AMA5C,EPgBQ,EChBwC,AMA5C,CNA6C,AMA5C,ENAuC,GAAU,AMAtD,CAAW,APgBf,EChB+C,ADgB1B,CEbR,AKHK,ENA+C,CCGlC,AKHV,ELGR,EKHY,CAAC,CNAqB,KMA1B,MAAiB,GAAG,GAAG,CAAN,GAAU,GAA3B,CAAjB,CAAA;ADMJ,ADJA,AHGa,ACNb,ACGa,AHF2D,AMAnB,APiBjD,CCjBS,AMDA,CPkBT,EKfE,AFHN,GDMa,AEHA,CFGA,AEHA,GJeT,CAAA,CIfS,GDHb,ACG4B,GDH5B,EEGuB,ALenB,CAAA,EKfsB,EFH1B,CAAA,MEGM,AHGO,AFYT,CAAA,EEZqC,CFYrC,CAAA,CEZS,AFYT,CAAA,GAAA,KGlBJ,CAAA,CEG0B,CAAC,GAAD,ALetB,EKfkC;ACKtC,ADLmD,AHItC,AEHT,AJeA,EIfA,AJeA,KEZS,CAAA,CGJsC,CDCvC,CJeR,CIfU,AJeV,EIhBwB,GCA+B,CAAC,GAAD,ALgBvD,CAAA,CKhB6D,EAAN,CAAR,MHItC,GAA2B,GAA3B,MFYT,CAAA,GAAA,CAAA,CAAA,GAAA,sBAAA;AMVJ,ADNoE,AHMvD,ACPb,ACGI,AJeH,CKjBD,ALcA,CIZI,CJYQ,CGfZ,GDOa,CAAA,IFQQ,CIZN,EDHf,ACGiB,AJYL,CIdgB,EDD5B,IHeY,CAAA,EGfZ,CAAA,MHeY,GERC,EFQD,CER+B,CCP3C,CAAA,IHeY,CAAA,SAAA,GAAS,CERR,CFQD,CAAZ;AMPA,AJAa,AEJT,EAAA,KFIS,CAAA,qBAAA,GAAwB,CEJF,EAAE,CAHT,eFOf;AICb,AEXA,AHIA,AHQa,ACEb,ACPI,AJ0BJ,EI1BI,EIPJ,AHIM,AFUA,AHmBM,GErBC,CAAA,OFqBb,IErBa,EMZb,AHIuB,CHQI,EMZ3B,AHI0B,AFUA,ACPA,CFKb,CELe,CAJA,CDWF,EAAA,GEVpB,AFUoB,EAAA,EACtB,EKfJ,ALeI,CKfJ,ALeK,OKfL,CAAA,EHI0B,CAAC,CFWtB,CAAA,CEXqB,EAAY,SGJtC,CAAA,CAAA,ELeK,CAAiB,KAAlB,CAAA,GAA0B,WAAA,CAAA,qBADJ,EAEtB,EAAA,CAAC,YAAA,CAAA,gBAAA,CAAiB,QAAlB,CAAA,GAA6B,WAAA,CAAA,wBAFP,EAGtB,EAAA,CAAC,YAAA,CAAA,gBAAA,CAAiB,gBAAlB,CAAA,GAAqC,WAAA,CAAA,gCAHf,IAAA,CAA1B;AGFA,ADRmD,AHStC,AELT,EAAA,KFKS,AELJ,CFKI,CGTsC,ADIxC,GCJ2C,CAAC,OHS1C,AELF,CCJwC,ADIxC,CCJqD,CHSpC,CGTuB,CAAA,AHStC;AIAb,AEXA,AHEmE,AHUtD,ACMb,ACjB4B,AJ8B5B,CK7BA,ADDa,AJ8Bb,GQ/BA,ALkBA,GDNa,CAAA,GFmBD,KQ/BZ,ELkBA,CKlBA,GR+BA,EAAuB,EQ/BvB,CAAA,CNYa,GAAuB,CAAvB,mBMZb,CAAA;AFYA,AJCa,ACKb,AHcI,EAAA,KEnBS,CAAA,KFmBT,CAAA,OAAA,CEnBS,AFmBT,GEnB0B,AFmB1B,OAAA,CEnBS;AIAb,AEZA,AHEA,AHWa,ACIb,AHeI,EAAA,EQhCJ,AHEM,GHWO,CAAA,ICIb,CHeI,CAAA,CQhCJ,GAAA,AHEoB,GAAG,CHWV,AFmBT,CAAA,EQhCJ,ANa8B,CMb9B,ARgCI,IK9BE,GHWO,CFmBT,MQhCJ,CAAA,GHEuB,CAAC,GAAD,EAAY;ACWnC,ADXgD,AHanC,ACqBT,AHHH,CAHD,EAAY,IEfC,CAAA,CGbmC,EFkC5C,GHNmB,CK5B6B,EL4BxC,CK5B2C,CAAC,KL4B5C,CGMR,AHNQ,CGOI,CEnCoC,CAAa,CAAb,EAAgB,GAAhB,CAAJ,AFkC5C,CHNQ,CGQI,IHRJ,EGMR,EAGY,GHTJ,CAAA,IEfC,GAA4D,ACqBrE,EAIY,EHVJ,GAAW,EAAX,CAAZ,EGMI,EAKI,UALJ,EAMI,iBANJ,EAMiC;AG5BrC,AEbA,AHC0E,AHctE,ACqBY,CEnChB,CHcI,CAAC,CMfL,CNeO,EADkE,ECsBzD,SAAA,GAAA,IKpChB,GAAA,ELoCgB,KKpChB,CAAA,mCAAA,CAAA;AFcA,AJEI,ACqBY,AHHhB,EElBI,CAAC,CFkBO,CElBL,ICqBS,MAAA,GAAA,EHHhB,IGGgB;AGtBhB,AEdA,AHEA,AHWyE,AOlBzE,AN0CgB,CDxBH,GMbb,AHEM,AIPN,KN0CgB,OKrChB,ACLA,GDKA,ACLA,CN0CgB,GAAA,EEnCW,CGF3B,ACLA,CDKA,ACLA,CJO8B,MFmCd,GEnCV,WIPN,CAAA,IDKA,CAAA,IHE8B,CAAC,QAAD,EAAmB,WAAnB,EAAsC;ACapE,ADZI,AHeS,ACoBG,AHLhB,CAAA,MEfa,CAAA,CGfT,AFmCY,EHLJ,MK9BA,EFmCI,CEnCD,EFmCC,KHLhB,EAA4B,EK9BxB,CFmCY,eDpBH,GAAsD;AIFnE,AEda,AHCa,AHgBtB,AOhBJ,ANaqB,AHkBjB,CKhCJ,CHiBI,AFeA,CEfC,COhBL,CPgBO,EMjBM,ANgBsD,CMhBtD,CLcQ,SHkBjB,CAAA,MS/BJ,CT+BI,CAAA,CS/BJ,CNaqB,CHkBjB,CQhCS,CLcqD,EKd3B,CCCvC,CAAA,CT+BI,SQhCmC,MLclB,gBMbrB,CAAA;AHcA,AEdI,ANiBA,ACFiB,AHiBjB,EEfA,AFeA,CEfC,EAAE,IMjBH,ALeiB,IKfb,CAAC,IRgCL,CAAA,CQhCA,KAAgB,CLeC,EKfjB,CLe6C,AHiB7C,CGjBiB,AHiBjB,CQhCsB,ERgCtB,UQhCsB,ARgCtB,CQhCsB,gBAAA,CAAiB,gBAAvC,GAA0D,YAAA,CAAA,gBAAA,CAAiB,QAA3E;AFeJ,AEfuF,AHCvF,AHcmE,AOdnE,ANiBqB,AHejB,CQlCS,ANgBA,CFkBT,EKhCE,AIAN,KNiBqB,KMjBrB,GAAA,CTgCI,CAAA,KShCJ,CAAA,ANiBqB,GAA2B,CAA3B,KEjBe,GAAG,AIAvC,ATgCI,CShCJ,ATgCI,GAAA,KKhCE,aLgCF,iBKhCmC,CAAC,UAAD,EAAqB,GAArB,EAAkC,GAAlC,EAA6C;ACepF,ADdI,AHkBS,ACDQ,AHepB,CAJD,EAAY,IEVC,CAAA,CGlBT,AFiBiB,UEjBP,AL4Bc,GAAhB,CK5BM,EFiBG,CEjBA,EFiB2B,CEjBxB,AHkBX,ACDQ,AHWT,CAAA,EK5BE,AHkBuB,CGlBjC,GAA2B,CHkBlB,EGlBT,OL4BQ,KAAA,OAAA,CAAA,gBAAA,GAAgB,EAAhB,CAAZ;AMbA,AEfa,AHAqB,AHmBrB,AOnBb,ANkBqB,CEnBrB,GICA,GDAa,ANmBA,CMnBA,ANmBA,CCDQ,EMlBrB,GAAA,OAAA,CAAA,ENkBqB,CKlBR,ELkB0C,CKlBtB,GCAjC,CPmBa,AOnBb,ENkBqB,CDCmB,GMnBN,IAAD,ANmBpB,EMnBsC;AFgBnD,AEfI,ANmBS,ACGQ,MKtBX,CNmBG,CAAA,CCGQ,IKtBJ,GAAG,YAAA,CAAA,GLsBC,GAAkC,KKtBnC,ANmBP,CMnBmB,CLsBX,CDH2B,EMnB5B,KNmBP,CMnB6B,YAAA,CAAA,gBAAA,CAAiB,KAAvD;AFgBJ,AEfI,AHAE,AHoBO,AOpBb,ANsBY,IEtBN,AIAN,EJAM,CHoBO,CAAA,CMpBF,AHAL,AFsBM,CEtBN,KIAN,CDAkB,ECAlB,CDAqB,MCArB,CAAA,CJAM,CAAA,CHoBO,EMpBQ,ALsBT,CKtBS,ANoBgB,ECEQ,CDFhC,IGpBP,AIAN,CJAM,AIAN,CNsBY,OKtBS,CAAiB,KAApB,AHAZ,CAAA,EGAwC,AHAxC,OGAwC,CAAA,SHAxC,CAAA,WAAA,CAAA,CGAwC,EAA1C,WHAE,CAAA,CAAA;ACgBN,AEfC,AHDK,AFuBM,CKzBC,GHEN,GAAA,EFuBK,CEvBL,EAAA,CAAA,CAAA,CAAD,eFuBM,GAAgC,WAAA,CAAA,qBAAhC;AGNZ,ADjBM,AIUN,ANcY,IExBA,AIUZ,GJVY,EFwBA,CExBA,EAAA,CAAA,CAAA,CAAN,WFwBM,EMdZ,CNcwC,EMdxC,INcY,GMdZ,CAAA,sCAAA,CAAA;AHQA,AEfa,ALsBD,OKtBC,CAAA,CLsBD,WKtBC,GAAe,ELsBhB,GAA2B,KKrBnC,ELqBQ,GKtBgB,EAExB,WAFwB,EAGxB,MAHwB,EAIxB,qBAJwB,EAKxB,IALwB,EAKP;AFWrB,AETI,AHRS,AISb,ANwBQ,IMxBR,EDDU,CHRG,CAAA,CFiCA,aKzBa,ECC1B,ANwBQ,CKzBqB,ECC7B,ANwB+B,EKzBE,CAAC,GAAL,CAAS,ACCtC,CAAA,ENwByC,CAAC,CKzBC,ELyBF,CKzBK,ALyBtC,GKzBqB,IAAwB,OHRxC,GAAmD,CGQX,CAAA,QHRY,AISjE,CAAA,CJTgE,EAGhD,MGKZ;AFUJ,AETI,AL0BY,MK1BN,AHRN,EFkCY,CAAA,GAAA,EElCZ,GAAA,EAAA,CAAA,EGQsB,GAAG,IL0Bb,CAAA,CAAA,UK1B6B,GAAG,GAAnB,GAAyB,WAAA,CAAA,kBAAlD;AFUJ,AERI,ACAI,ANwBQ,IMxBR,EDAE,AHTN,EFiCe,CAAA,GAAA,CMxBX,GAAA,CJTJ,GAAA,EGSsB,AHTtB,CAAA,EGSyB,GCArB,CAAA,ANwBW,CAAA,CAAH,MKxBa,CAAA,ACArB,CAAA,SAAA,UDAqB,CAAqB,WAAA,CAAA,kBAArB,EAAyC,gBAAzC,IAA6D,GAAtF;AFSJ,AERI,AHRA,AIOI,ANyBA,IMzBW,EDCT,AHRA,GFgCG,KMzBM,GAAA,QJPU,CFgCrB,EEhCwB,CGQC,ACDd,ANyBc,CMzBd,ANyBX,EKxB4B,OCDjB,CAAA,IDCiB,CAAA,IHRiB,CAAC,AIO9C,QJP6C,EAAW,KGQ5B,CAAqB,KHRJ,CAAjD,KGQgC,EAAkC,MAAM,GAAG,GAA3C,CAAhC;AFSJ,AERI,AHRA,AIOJ,ANyBQ,IMzBF,EDCI,AHRA,GFgCG,MMzBI,EDCI,CCDD,EDCI,EHRE,GAAG,CIOD,ANyBpB,CMzBqB,ENyBI,CAAzB,CMzBY,CDCI,ACDU,CDCV,aCDJ,EAApB,KDCwB,CAAqB,CHRc,CAAC,SGQJ,GAAG,GAAnC,EAAwC,EHRL,EAAsB,GAAtB,EAA2B,EGQX,CHRhB,CAAvD,CGQ0E,GAAtD,CAApB;AFSJ,AEPY,AHRR,AIME,AN0BE,IM1BF,EDEM,ACFN,CDEM,EHRD,AIML,AN0BO,CKxBD,SLwBJ,CM1BF,CAAA,CAAA,CAAA,QDEM,CAAA,CAAA;AFQZ,AERY,AHPJ,AIKF,AN2BD,IEhCG,AIKA,EDEO,CAAA,EHPF,AIKL,CDEO,CHPA,CIKP,EAAA,CAAA,KAAF,UJL4B,CGOnB,CAAA,CAAH,AHPyB,WAAA,CAAA,WAD1B;ACiBX,AERI,AHPI,AIIF,IJJE,AIIO,EDGL,GHPG,CIIE,CJJA,EIIA,CDGG,CCHH,CAAA,CDGM,KCHf,GJJuB,CAAC,YGOT,CAAA,IHP0B,CAAC,KGO3B,CAAW,UHPe,CAAlB,KGOR,CAAjB;AFSJ,AERI,AHVO,AIQX,AN2BW,EAAA,CEnCP,CIQE,EDEI,QCFM,CDEG,CLyBR,CM3BQ,AN2BR,CKzBW,ICFE,GAAG,CN2BhB,CAAA,IM3BQ,GAAiB,MAAjB,CDE0B,ECFA,CDEG,ELyBrC,EKzByC,ACFpD,CDEqD,ALyBjD,GKzB4C,CAAS,QAAT,ALyB5C,CKzBkB,GAA+C,CAAjE;AFSJ,AERI,AHPH,AIKD,AN0BI,CE1CS,GIgBP,EDEI,ELwBN,KAAA,EKxBe,CLwBf,EKxBkB,ELwBlB,IM1BsB,GAAG,UAAU,GAAG,CDEG,ACF7C,GDEgD,IAAI,CAAC,GAAL,CAAS,QAAT,CAA1B,GAA+C,CAAjE;AFSJ,AEPI,ACHJ,IAAM,EDGI,ICHE,GAAG,IDGM,GAAI,IAAI,CAAC,IAAL,CAAU,GCHA,GAAG,GAAtC,EDG8C,GAAG,uBAAxB,IAAmD,GAApD,GAA2D,IAAI,CAAC,EAApF;AFQJ,AENI,ACJJ,ANyBQ,IMzBF,CNyBG,CKrBC,GAAG,CLqBC,EKrBE,GCJC,CNyBT,EMzBY,ANyBE,KAAK,CMzBD,GAAG,CDIG,ACJhC,GDImC,GLqB3B,EAAgC,MKrBpC,CLqBI,CAAwC,UAAC,MAAD,EAAe;AGd/D,AENI,ACHJ,ANuBoE,IMvB9D,EDGI,GAAG,GAAG,CLoBoD,KAAI,CAAC,EMvBlD,GAAe,IDGN,CLoBoC,CAAgB,CKpBjD,KLoBiC,CAAA,KKpBhE;AFOJ,AELI,ACJA,ANsBuF,EMtBvF,CAAC,EAAE,ANsBC,IKlBG,gBCL2B;AHWtC,AELQ,ACJJ,ANsBC,EMtBD,CAAC,ANoBM,CKhBH,CCJD,QDIU,EAAA,SADN;AFOX,AELQ,ACP8B,CAAtC,GDOQ,SAAS,EAAA,SAFN;AFQX,AELQ,ACHA,ANqBG,EAAA,EKlBH,ACHA,CAAA,GAAA,ODGW,CLkBR,CKlBQ,ALkBR,QMrBH,CAAA,ANqBG,CMrBH,ANqBG,CKrBA,SLqBA,GAAP,UACI,MADJ,EAEI,CAFJ,EAGI,CAHJ,EAII,gBAJJ,EAKI,cALJ,EAK2B;AGjB/B,AELQ,ACJA,ANyBA,IKrBA,ACJG,CAAA,GAAA,ANyBH,YKrBgB,EAAA,ELqBhB,CMzBG,CAAA,CAAH,ENyBA,KAAA,CAAA,EAAA,CKzBG;AFUX,AELQ,ACHR,ANuBQ,IKpBA,ACHF,ENuBE,IMvBI,GAAG,MDGQ,EAAE,ACHF,CDGG,ACHF,ANuBhB,GKpBiB,ALoBU,EKpBJ,GAAN,ALoBe,CKzB7B,KCEI,CAAwB,QAAxB,CAAf,KNuBQ;AGdR,AELQ,ACHR,ANsB6D,IKnBrD,ACHF,GAAG,GAAG,CDGG,EAAE,GCHC,CAAC,UAAP,CAAkB,EDGb,CAAA,CCHL,CAAZ,KDGiB,CAAS,WAAT,CANN;AFYX,AELQ,ACFR,IDEQ,ACFF,IDEM,EAAA,IAPD,ICKS,GAAG,IAAI,UAAA,CAAA,cAAJ,CACnB,GADmB,EAEnB,MAFmB,EAGnB,WAHmB,EAInB,UAJmB,EAKnB,qBAAA,CAAA,UALmB,EAMnB,iBANmB,CAAvB;AHQA,AELQ,ACMR,ANcQ,IKpBA,ACMJ,KNcS,UKpBU,ALoBf,CMdY,ANcI,CKpBC,ECMF,GNcf,EKpBiB,ALoBO,CKpBP,ALoBjB,EAA2B,CMdnC,ANcQ,EAA8B,YKpBb,CAAkB,GLoBnC,CKpBiB,CLoB+B,cAAhD;AGdR,AEdW,AL6BN,GK7BD,ALqBO;AGNX,AELC,ACMD,CDxCa,GCwCP,mBAAmB,GAAG,SAAtB,mBAAsB,CAAC,QAAD,EAAqB;AHAjD,AGCI,ANcO,EMdP,ANcO,QMdC,CAAC,KNcF,CAAA,SAAA,CMdP,ANcO,CMdmB,OAA1B,EAAmC,GNc5B,GAAP,EMdA,UNcA;AGdJ,AGCI,ANcI,EMdJ,ONcS,CMdD,CAAC,ONcL,CAAe,QMdnB,CAA0B,ANctB,SMdJ,EAAqC,QAArC;AHAJ,AGCC,ANcO,CMjBR,QNiBa,SAAL,CAAe,SAAf,GAA2B,KAAK,sBAAhC;AGdR,AHeQ,SAAK,SAAL,CAAe,QAAf,CAAwB,CAAxB,EAA2B,CAA3B,EAA8B,KAAK,UAAnC,EAA+C,KAAK,UAApD;AGdR,AGAA,ANeK,GAJM,CMXL,WAAW,GAAG,SAAd,WAAc,CAAC,KAAD,EAAc;AHClC,AGAI,MAAM,QAAQ,GAAG,qBAAA,CAAA,UAAA,CAAW,KAAX,CAAjB;AHCJ,AGAI,ANeO,EAAA,IMfD,SAAS,CNeR,CAAA,CMfW,MAAM,ENejB,CMfoB,ANepB,IMfwB,CAAC,GAAL,CAAS,GNe7B,GAAP,EMf2B,CAAT,GAA8B,CAAhD,GNeoB,QAApB,EAAsC;AGd1C,AGAI,ANcA,MMdM,ENcN,KAAA,EMde,CNcf,EMdkB,ENclB,IMdwB,GAAG,IAAI,CAAC,GAAL,CAAS,QAAT,CAAT,GAA8B,CAAhD;AHCJ,AGCI,EAAA,cAAc,CAAC,WAAf,CAA2B,SAA3B,EAAsC,SAAtC;AHAJ,AGCC,ANYO,CMlBR,GNkBQ,QAAQ,CAAC,OAAT,CAAiB,UAAC,EAAD,EAA+D;AGZxF,UHY4B,SAAA,GAAA,EAAA,CAAA;AGX5B,AGCA,IAAM,MNUiC,SMVlB,ANUkB,GMVf,ANUe,EAAA,CAAA,MMVjC,eAAkB,CAAC,YAAD,EAAuB,SAAvB,EAAwC;AHAhE,AGCI,SAAO,CNSuC,QMT9B,GNS8B,EMTzB,CNSyB,EAAA,CAAA,KMTvC,GACD,YAAY,IAAI,CAAhB,GACI,GADJ,GAEI,YAHH,GAID,YAAY,IAAI,GAAhB,GACA,CADA,GAEA,YANN;AHAJ,AGOC,CARD,SNU+D,eAAA,GAAA,EAAA,CAAA;AGR/D,AHSY,aAAA,KAAI,CAAC,UAAL,CACI,WADJ,EAEI,SAFJ,EAGI,SAHJ,EAII,KAAI,CAAC,oBAAL,CAA0B,eAA1B,CAJJ,EAKI,KAAI,CAAC,oBAAL,CAA0B,eAA1B,CALJ,CAAA;AGRZ,AGOA,ANOa,IMPP,CNAE,sBMAqB,GAAG,SAA1B,uBAA0B,GAAA;AHNhC,AGOY,ANQP,GAVM,GMEC,KAAA,GAAA,OAAA,CAAA,KAAA,CAAA,KAAA;AHNZ,AGOI,EAAA,WAAW,CAAC,OAAA,CAAA,KAAA,CAAM,KAAP,CAAX;AHNJ,AGOI,ANQO,EMRP,ANQO,OMRP,CAAA,KAAA,CAAM,ANQC,CAAA,IMRP,GAAc,ENQP,CAAA,WAAA,CMRsB,CAAC,CNQ9B,IMRmC,GAAG,GNQnB,SAAnB,EAAsC,EMRT,EAA2B,KNQxD,EAAuD,SMR1B,CAA7B;AHNJ,AGOC,ANQO,CMZR,QNYa,SAAL,CAAe,SAAf;AGdR,AHeQ,SAAK,WAAL,CAAiB,KAAK,iBAAtB,EAAyC,KAAK,gBAA9C,EAAgE,KAAK,eAArE;AGdR,AGOA,ANSQ,IMTF,KNSO,OMTK,ENSV,CMTa,ANSE,MAAf,CAAsB,EMTxB,GNS6B,SMTd,CAAC,EAAD,EAAoB,GNSjC,EAA8C,KAAK,iBAAnD;AGfR,AHgBQ,MMVgB,GNUX,KMVW,GAAA,CNUhB,CMVgB,ANUD,CMVC,KNUhB,CAAsB,SAAtB,EAAiC,SAAjC;AGfR,AGMI,ANWI,SMXJ,ANWS,CMXR,QAAQ,ANWL,CMXM,ANWS,IMXlB,CAAc,CNWX,SMXY,EAAD,EAAiB;AHLpC,AHiBK,GARM,KMJW,IAAA,GAAA,EAAA,CAAA;AHJtB,AGIyC,WAAA,IAAI,KAAK,YAAA,CAAA,WAAA,CAAY,KAArB;AHHzC,AGGmE,ANcxD,EAAA,CMdN,CAAD,YNcO,CAAA,SAAA,CAAA,QAAA,GAAP,UACI,kBADJ,EAEI,EAFJ,EAGI,iBAHJ,EAGoC;AGnBxC,AGEoE,CADpE,ONiBU,CAAA,GAAA,EAAA,CAAA;AGjBV,QHiBa,CAAA,GAAA,EAAA,CAAA;AGhBb,AGCA,ANkBQ,IMlBF,KNkBO,SAAL,CAAe,IMlBE,ANkBjB,GMlBoB,ANkBE,SMlBxB,GNkBE,gBMlBoB,CAAC,EAAD,EAAoB;AHAhD,AHmBQ,MMnBuB,GNmBlB,KMnBkB,GAAA,CNmBvB,CMnBuB,ANmBR,CMnBQ,QNmBvB,GAA2B,iBAAiB,IAAI,KAAK,gBAArD;AGlBR,AGDqD,ANoB7C,SMpB6C,ANoBxC,QMpBgD,CAAC,ANoBtD,CAAe,KMpB8B,GAAkB,ANoB/D,CAAwB,UMpBuC,CAAA,ONoB/D,EAA4C,CAA5C,EAA+C,CAA/C,EMpB6C;AHErD,AGFsF,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","file":"game_touch.77de5100.js","sourceRoot":"..","sourcesContent":["export interface Game {\n    name: string;\n    level: number;\n    score: number;\n}\n\nexport interface Coordinate {\n    x: number;\n    y: number;\n}\n\nexport interface Field {\n    radius: number;\n    backgroundColor: number;\n    middleCoordinate: Coordinate;\n}\n\nexport enum direction {\n    clockwise = -1,\n    сСlockwise = 1\n}\n\nexport interface Pointer {\n    direction: direction;\n    color: string;\n    angle: number;\n}\n\nexport interface Switcher {\n    rootAngle: number;\n    offsets: number;\n}\n\nexport enum entityTypes {\n    enemy = 'enemy',\n    helper = 'helper'\n}\n\nexport enum entityProperties {\n    enemy = 'enemy',\n    exploder = 'exploder',\n    counterIncreaser = 'counterIncreaser'\n}\n\nexport interface Entity {\n    type: entityTypes;\n    enetityProperty: entityProperties;\n    xPosition: number;\n    yPosition: number;\n    enemyRadius: number;\n    middlePointAngle: number;\n    enemyAngleRange: Array<number>;\n    enemyId: number;\n}\n\nexport interface State {\n    entities: Array<Entity>;\n    tickCounter: number;\n    countOfTicksWithoutEnemyDestory: number;\n    changeDirectionCounter: number;\n    angle: number;\n}\n\nexport interface LoaderData {\n    width: number;\n    color: string;\n}\n\nexport interface LoaderPostion {\n    position: number;\n    maxPosition: number;\n}\n","export type GetRadians = (degrees: number) => number;\nexport const getRadians = (degrees: number) => (Math.PI / 180) * degrees;\n","import { Coordinate } from '../model/game.model';\n\nexport const startAnglePosition = 179;\nexport const minimumEnemyOffset = 20;\nexport const maxEnemiesCount = 10;\n\nexport const maxDelayToAddEnemyInTicks = 360;\nexport const maxDelayInactionsInTicks = 180;\n\nexport const changeDirectionTriesMessage = 'direction counter:';\nexport const countOfEnemiesMessage = 'count of enemies:';\n\nexport const loaderWidth = 200;\nexport const loaderHeight = 15;\nexport const verticalLoaderOffset = 7;\nexport const loaderMinColor = '00ff00';\nexport const loaderMaxColor = 'ff0000';\n\nexport const countOfChangeDirectionTriesMessageCoordintate: Coordinate = {\n    x: 10,\n    y: 85\n};\n\nexport const countOfEnemiesMessagePositionCoordinate: Coordinate = {\n    x: 10,\n    y: 40\n};\n\nexport const enemyStrokeStyleColor = 'red';\nexport const exploderStrokeStyleColor = 'black';\nexport const counterIncreaserStrokeStyleColor = 'green';\n\nexport const helperGeneratorChance = 0.1;\n","import { Entity, Coordinate, LoaderData, entityProperties } from '../model/game.model';\nimport { GetRadians } from '../helpers/radiant-transformer';\nimport {\n    loaderHeight,\n    loaderWidth,\n    verticalLoaderOffset,\n    enemyStrokeStyleColor,\n    exploderStrokeStyleColor,\n    counterIncreaserStrokeStyleColor\n} from './constants';\n\ntype EntityPropertyColors = {\n    [type in entityProperties]: string;\n};\nconst entityPropertyColors: EntityPropertyColors = {\n    [entityProperties.enemy]: enemyStrokeStyleColor,\n    [entityProperties.exploder]: exploderStrokeStyleColor,\n    [entityProperties.counterIncreaser]: counterIncreaserStrokeStyleColor\n};\n\nexport class CanvasRenderer {\n    private readonly entityPropertyColors: EntityPropertyColors = entityPropertyColors;\n\n    private readonly defaultStartAngle: number = 0;\n    private readonly defaultEndAngle: number;\n\n    private readonly defaultLineWidth: number = 1;\n    private readonly pointerLineWidth: number = 4;\n    private readonly defaultLineJoin: CanvasLineJoin = 'round';\n\n    private readonly middleXCoordinate: number;\n    private readonly middleYCoordinate: number;\n\n    private readonly defaultStrokeStyleColor: string = 'black';\n    private cleanUpBackgroundColor: string = 'white';\n    private enemyStrokeStyleColor: string = enemyStrokeStyleColor;\n    private pointerStyleColor: string = 'blue';\n    private defaultTextColor: string = 'black';\n\n    constructor(\n        private canvasCtx: CanvasRenderingContext2D,\n        private radius: number,\n        private innerRadius: number,\n        private canvasSize: number,\n        getRadians: GetRadians,\n        canvasMiddlePoint: Coordinate\n    ) {\n        this.defaultEndAngle = getRadians(360);\n\n        const { x, y } = canvasMiddlePoint;\n        this.middleXCoordinate = x;\n        this.middleYCoordinate = y;\n\n        this.initCanvas();\n    }\n\n    public drowStaticGameField() {\n        [this.radius, this.innerRadius].forEach((radius: number) => this.drowCircle(radius));\n    }\n\n    public drowEntity(\n        radius: number,\n        x: number,\n        y: number,\n        strokeStyleColor: string = this.enemyStrokeStyleColor,\n        fillStyleColor?: string\n    ) {\n        this.drowCircle(radius, x, y, strokeStyleColor, fillStyleColor);\n    }\n\n    public canvasCleanUp() {\n        this.canvasCtx.beginPath();\n        this.canvasCtx.fillStyle = this.cleanUpBackgroundColor;\n        this.canvasCtx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n    }\n\n    public drowEntities(entities: Entity[]) {\n        entities.forEach(({ xPosition, yPosition, enemyRadius, enetityProperty }: Entity) =>\n            this.drowEntity(\n                enemyRadius,\n                xPosition,\n                yPosition,\n                this.entityPropertyColors[enetityProperty],\n                this.entityPropertyColors[enetityProperty]\n            )\n        );\n    }\n\n    public drowPointer(xPosition: number, yPosition: number) {\n        this.canvasCtx.beginPath();\n        this.setPathView(this.pointerStyleColor, this.pointerLineWidth, this.defaultLineJoin);\n\n        this.canvasCtx.moveTo(this.middleXCoordinate, this.middleYCoordinate);\n        this.canvasCtx.lineTo(xPosition, yPosition);\n\n        this.canvasCtx.stroke();\n    }\n\n    public drowText(\n        messageWithCounter: string,\n        { x, y }: Coordinate,\n        specificTextColor: string | null\n    ) {\n        this.canvasCtx.font = '25px Arial';\n        this.canvasCtx.fillStyle = specificTextColor || this.defaultTextColor;\n        this.canvasCtx.fillText(messageWithCounter, x, y);\n    }\n\n    public drowLoader({ x, y }: Coordinate, { width, color }: LoaderData) {\n        const yWithOffset = y + verticalLoaderOffset;\n\n        this.canvasCtx.beginPath();\n        this.canvasCtx.fillStyle = color;\n        this.canvasCtx.fillRect(x, yWithOffset, width, loaderHeight);\n\n        this.canvasCtx.beginPath();\n        this.canvasCtx.strokeStyle = this.defaultStrokeStyleColor;\n        this.canvasCtx.strokeRect(x, yWithOffset, loaderWidth, loaderHeight);\n    }\n\n    private drowCircle(\n        radius: number,\n        x: number = this.middleXCoordinate,\n        y: number = this.middleYCoordinate,\n        strokeStyleColor: string = this.defaultStrokeStyleColor,\n        fillStyleColor?: string,\n        lineWidth: number = this.defaultLineWidth,\n        startAngle: number = this.defaultStartAngle,\n        endAngle: number = this.defaultEndAngle,\n        lineJoin: CanvasLineJoin = this.defaultLineJoin\n    ) {\n        this.canvasCtx.beginPath();\n        this.setPathView(strokeStyleColor, lineWidth, lineJoin, fillStyleColor);\n\n        this.canvasCtx.arc(x, y, radius, startAngle, endAngle);\n        this.canvasCtx.stroke();\n        this.canvasCtx.fill();\n    }\n\n    private initCanvas() {\n        this.canvasCtx.canvas.width = this.canvasSize;\n        this.canvasCtx.canvas.height = this.canvasSize;\n        this.canvasCtx.canvas.style.backgroundColor = this.cleanUpBackgroundColor;\n    }\n\n    private setPathView(\n        strokeStyleColor: string,\n        lineWidth: number,\n        lineJoin: CanvasLineJoin,\n        fillStyleColor?: string\n    ) {\n        this.canvasCtx.strokeStyle = fillStyleColor\n            ? this.defaultStrokeStyleColor\n            : strokeStyleColor;\n        this.canvasCtx.fillStyle = fillStyleColor || this.cleanUpBackgroundColor;\n        this.canvasCtx.lineWidth = lineWidth;\n        this.canvasCtx.lineJoin = lineJoin;\n    }\n}\n","import { startAnglePosition } from './constants';\nimport { State } from '../model/game.model';\n\nexport const state: State = {\n    entities: [],\n    tickCounter: 0,\n    countOfTicksWithoutEnemyDestory: 0,\n    changeDirectionCounter: 5,\n    angle: startAnglePosition\n};\n","import { loaderMinColor, loaderMaxColor, loaderWidth } from '../constants';\nimport { LoaderData, LoaderPostion } from '../../model/game.model';\n\nconst transformHexToDec = (hex: string): number => parseInt(hex, 16);\nconst transformDecToHex = (dec: number): string => dec.toString(16);\nconst colorHexFormat = (hex: string): string => `#${hex.padStart(6, '0')}`;\n\nconst getPositionInPercents = (position: number, maxPosition: number): number =>\n    position / maxPosition;\nconst getValueBasedOnPercentsInRange = (percentage: number, min: number, max: number): number =>\n    percentage * (max - min) + min;\n\nconst [min, max] = [transformHexToDec(loaderMinColor), transformHexToDec(loaderMaxColor)];\n\nexport const getLoaderDataBasedOnCurrentLoaderCounterPosition = ({\n    position,\n    maxPosition\n}: LoaderPostion): LoaderData => {\n    const percentagesPosition = getPositionInPercents(position, maxPosition);\n    const decColorPosition = getValueBasedOnPercentsInRange(percentagesPosition, min, max);\n\n    return {\n        width: percentagesPosition * loaderWidth,\n        color: colorHexFormat(transformDecToHex(decColorPosition))\n    };\n};\n","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to generate unique IDs. */\nvar idCounter = 0;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Generates a unique ID. If `prefix` is given, the ID is appended to it.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {string} [prefix=''] The value to prefix the ID with.\n * @returns {string} Returns the unique ID.\n * @example\n *\n * _.uniqueId('contact_');\n * // => 'contact_104'\n *\n * _.uniqueId();\n * // => '105'\n */\nfunction uniqueId(prefix) {\n  var id = ++idCounter;\n  return toString(prefix) + id;\n}\n\nmodule.exports = uniqueId;\n","export const randomIntegerInRange = (min: number, max: number): number =>\n    Math.floor(min + Math.random() * (max + 1 - min));\n","import uniqueId from 'lodash.uniqueid';\n\nimport { Entity, Coordinate, entityTypes, entityProperties } from '../../model/game.model';\nimport { minimumEnemyOffset } from '../constants';\nimport { getRadians } from '../../helpers/radiant-transformer';\nimport { randomIntegerInRange } from '../../helpers/randomizer';\n\nexport const getRandomHelperProperty = () =>\n    Math.random() > 0.5 ? entityProperties.counterIncreaser : entityProperties.exploder;\n\nexport const getEntityProperty = (type: entityTypes) => {\n    const isEnemy = entityTypes[type] === entityProperties.enemy;\n    return isEnemy ? entityProperties.enemy : getRandomHelperProperty();\n};\n\nexport const createEntity = (\n    angle: number,\n    innerRadius: number,\n    radius: number,\n    middlePointCoordinate: Coordinate,\n    type: entityTypes\n): Entity => {\n    const minEnemyPosition = Math.abs(angle % 360) + minimumEnemyOffset;\n    const maxEnemyPosition = minEnemyPosition + 360 - minimumEnemyOffset;\n\n    const middlePointAngle = randomIntegerInRange(minimumEnemyOffset, maxEnemyPosition) % 360;\n    const distanceFromMiddlePoint = randomIntegerInRange(innerRadius, radius * 0.9);\n    const enemyRadius = randomIntegerInRange(innerRadius * 0.1, innerRadius * 0.4);\n\n    const { x, y } = middlePointCoordinate;\n    const angleRad = getRadians(middlePointAngle);\n    const xPosition = distanceFromMiddlePoint * Math.sin(angleRad) + x;\n    const yPosition = distanceFromMiddlePoint * Math.cos(angleRad) + y;\n\n    const angleOffset = (Math.atan(enemyRadius / distanceFromMiddlePoint) * 180) / Math.PI;\n\n    const min = middlePointAngle - angleOffset;\n    const max = middlePointAngle + angleOffset;\n\n    return {\n        xPosition,\n        yPosition,\n        enemyRadius,\n        middlePointAngle,\n        enemyAngleRange: [min, max],\n        enemyId: uniqueId('enemy-id='),\n        type,\n        enetityProperty: getEntityProperty(type)\n    };\n};\n","import {\n    Coordinate,\n    direction,\n    Entity,\n    State,\n    LoaderPostion,\n    entityTypes\n} from '../model/game.model';\nimport { getRadians } from '../helpers/radiant-transformer';\nimport { CanvasRenderer } from './renderer';\nimport { state } from './state';\n\nimport {\n    maxEnemiesCount,\n    maxDelayToAddEnemyInTicks,\n    maxDelayInactionsInTicks,\n    changeDirectionTriesMessage,\n    countOfEnemiesMessage,\n    countOfChangeDirectionTriesMessageCoordintate,\n    countOfEnemiesMessagePositionCoordinate,\n    helperGeneratorChance\n} from './constants';\nimport { getLoaderDataBasedOnCurrentLoaderCounterPosition } from './calculation/rest-range.calculation';\nimport { createEntity } from './calculation/entity.calculation';\n\nconst { clockwise, сСlockwise } = direction;\nconst domRectList = document.body.getClientRects();\nconst { width, height } = domRectList[0];\n\nconst canvasSize = width > height ? height : width;\nconst canvasMiddlePosition = canvasSize / 2;\nconst radius = canvasMiddlePosition * 0.9;\nconst innerRadius = radius / 3;\n\nconst canvasMiddlePoint: Coordinate = {\n    x: canvasMiddlePosition,\n    y: canvasMiddlePosition\n};\n\nconst { x, y } = canvasMiddlePoint;\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\nconst canvasRenderer = new CanvasRenderer(\n    ctx,\n    radius,\n    innerRadius,\n    canvasSize,\n    getRadians,\n    canvasMiddlePoint\n);\n\nlet pointerDirection = clockwise;\n\nconst setDocumentListener = (listener: () => void) => {\n    document.addEventListener('click', listener);\n    document.addEventListener('keydown', listener);\n};\nconst drowPointer = (angle: number) => {\n    const angleRad = getRadians(angle);\n    const xPosition = radius * Math.sin(angleRad) + x;\n    const yPosition = radius * Math.cos(angleRad) + y;\n\n    canvasRenderer.drowPointer(xPosition, yPosition);\n};\n\nconst getUpdatedAngle = (updatedAngle: number, direction: number) => {\n    return direction === clockwise\n        ? updatedAngle <= 0\n            ? 360\n            : updatedAngle\n        : updatedAngle >= 360\n        ? 0\n        : updatedAngle;\n};\n\nconst performPointerItaration = () => {\n    const { angle } = state;\n    drowPointer(state.angle);\n    state.angle = getUpdatedAngle(angle + pointerDirection, pointerDirection);\n};\n\nconst hasNoEnemies = ({ entities }: State) =>\n    !entities.find(({ type }: Entity) => type === entityTypes.enemy);\nconst hasLessEnemiesToMax = ({ entities }: State) => entities.length < maxEnemiesCount;\nconst isDirectionCounterEmpty = ({ changeDirectionCounter }: State) => !changeDirectionCounter;\n\nconst addNewEnemy = (entity: Entity) => (state.entities = [...state.entities, entity]);\n\ntype GetRandomEntityType = () => entityTypes;\nconst getRandomEntityType: GetRandomEntityType = () =>\n    Math.random() > helperGeneratorChance ? entityTypes.enemy : entityTypes.helper;\n\nconst addNewEntityWithPassedValidator = (\n    shouldAddNewEnemyValidator: (state: State) => boolean,\n    state: State,\n    angle: number,\n    type: entityTypes\n) => {\n    if (shouldAddNewEnemyValidator(state)) {\n        addNewEnemy(createEntity(angle, innerRadius, radius, canvasMiddlePoint, type));\n    }\n};\n\nconst updateEntities = (angle: number, type: entityTypes) => {\n    addNewEntityWithPassedValidator(hasNoEnemies, state, angle, type);\n    canvasRenderer.drowEntities(state.entities);\n};\n\nconst addEntity = (angle: number, type: entityTypes) => {\n    addNewEntityWithPassedValidator(hasLessEnemiesToMax, state, angle, type);\n};\n\nconst drowCounterMessageWithLoader = (\n    staticPrefixMessage: string,\n    dynamicValue: number,\n    useSpecificColor: boolean,\n    textPositionCoordintate: Coordinate,\n    loaderPosition: LoaderPostion\n) => {\n    const messageWithCounter = `${staticPrefixMessage} ${dynamicValue}`;\n    const specificTextColor = useSpecificColor ? 'red' : null;\n\n    canvasRenderer.drowText(messageWithCounter, textPositionCoordintate, specificTextColor);\n    canvasRenderer.drowLoader(\n        textPositionCoordintate,\n        getLoaderDataBasedOnCurrentLoaderCounterPosition(loaderPosition)\n    );\n};\n\nconst drowTextMessagesWithLoader = (state: State) => {\n    drowCounterMessageWithLoader(\n        changeDirectionTriesMessage,\n        state.changeDirectionCounter,\n        isDirectionCounterEmpty(state),\n        countOfChangeDirectionTriesMessageCoordintate,\n        {\n            position: state.countOfTicksWithoutEnemyDestory,\n            maxPosition: maxDelayInactionsInTicks\n        }\n    );\n    drowCounterMessageWithLoader(\n        countOfEnemiesMessage,\n        state.entities.length,\n        !hasLessEnemiesToMax(state),\n        countOfEnemiesMessagePositionCoordinate,\n        {\n            position: state.tickCounter,\n            maxPosition: maxDelayToAddEnemyInTicks\n        }\n    );\n};\n\nconst validateEntitiesCounts = (angle: any, getRandomEntityType: GetRandomEntityType) => {\n    state.tickCounter = state.tickCounter + 1;\n\n    if (state.tickCounter >= maxDelayToAddEnemyInTicks) {\n        state.tickCounter = 0;\n        addEntity(angle, getRandomEntityType());\n    }\n};\n\nconst validateTicksWithoutDestroy = () => {\n    state.countOfTicksWithoutEnemyDestory = state.countOfTicksWithoutEnemyDestory + 1;\n};\n\nconst cleanUpTicksWithoutEnemyDestroy = (isEnemyInRange: boolean) => {\n    if (isEnemyInRange) {\n        state.countOfTicksWithoutEnemyDestory = 0;\n    }\n};\n\nconst updateChangeDirectionCounter = (diff: number) => {\n    state.changeDirectionCounter = state.changeDirectionCounter + diff;\n\n    if (state.changeDirectionCounter < 0) {\n        state.changeDirectionCounter = 0;\n    }\n};\n\nconst reduceChangeDirectionCounterOnLongPending = () => {\n    if (state.countOfTicksWithoutEnemyDestory > maxDelayInactionsInTicks) {\n        cleanUpTicksWithoutEnemyDestroy(true);\n        updateChangeDirectionCounter(-1);\n    }\n};\n\nconst startGame = () => {\n    setInterval(() => {\n        canvasRenderer.canvasCleanUp();\n        canvasRenderer.drowStaticGameField();\n\n        validateEntitiesCounts(state.angle, getRandomEntityType);\n        validateTicksWithoutDestroy();\n        reduceChangeDirectionCounterOnLongPending();\n\n        updateEntities(state.angle, entityTypes.enemy);\n\n        performPointerItaration();\n\n        drowTextMessagesWithLoader(state);\n    }, 10);\n};\n\nconst validateChangeDirectionCounter = (isEnemyInRange: boolean) => {\n    const { changeDirectionCounter } = state;\n    const shouldNotReduceCounter = !isEnemyInRange && changeDirectionCounter === 0;\n\n    if (shouldNotReduceCounter) {\n        return;\n    }\n\n    const diff = isEnemyInRange ? 1 : -1;\n    updateChangeDirectionCounter(diff);\n};\n\nconst getUpdatedEnemyStatus = () => {\n    if (!state.entities.length) {\n        return false;\n    }\n\n    const { angle } = state;\n    const enemiesInRange = state.entities\n        .filter(({ enemyAngleRange: [min, max] }: any) => {\n            const validatedAngle = angle === 360 ? 0 : angle;\n            const isEnemyInRange = validatedAngle > min && validatedAngle < max;\n\n            return isEnemyInRange;\n        })\n        .map(({ enemyId }: any) => enemyId);\n\n    let isEnemyInRange = false;\n\n    if (enemiesInRange.length) {\n        state.entities = state.entities.filter(\n            (enemy: any) => !enemiesInRange.some((enemyId: number) => enemyId === enemy.enemyId)\n        );\n\n        isEnemyInRange = true;\n    }\n\n    return isEnemyInRange;\n};\n\nconst changePointerDirection = () => {\n    const isEnemyInRange = getUpdatedEnemyStatus();\n    const { changeDirectionCounter } = state;\n    if (changeDirectionCounter || isEnemyInRange) {\n        pointerDirection = pointerDirection === clockwise ? сСlockwise : clockwise;\n    }\n\n    cleanUpTicksWithoutEnemyDestroy(isEnemyInRange);\n    validateChangeDirectionCounter(isEnemyInRange);\n};\n\nlet isGameStarted: boolean = false;\nconst addListenerToStartGame = (listener: () => void) => {\n    const button = document.getElementById('button');\n\n    if (!button) {\n        return;\n    }\n\n    button.addEventListener('keydown', event => event.preventDefault());\n    button.addEventListener('click', () => {\n        if (!isGameStarted) {\n            isGameStarted = true;\n            listener();\n            document.body.focus();\n        }\n    });\n};\nsetDocumentListener(changePointerDirection);\n\naddListenerToStartGame(startGame);\n","import './src/game/';\n"]}