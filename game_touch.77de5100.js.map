{"version":3,"sources":["src/model/game.model.ts","src/helpers/radiant-transformer.ts","src/helpers/randomizer.ts","src/game/renderer.ts","src/game/index.ts","index.ts"],"names":[],"mappings":";;;;;AAiBA,IAAY,SAAZ;AKjBA,ADAA,ADGA,AFFa,ACDA,IEAb,ADGA,GEHA,AJCa,ACDA,CGAb,AJCa,ACDA,QEAb,EDGA,AFFa,CGDb,ECAA,AJC0B,CID1B,IDAA,CAAA,CFAa,GDCc,ACDS,ODCV,EAAgB,CCDL,GAAD,EAAc,EEAlD,CAAA,AFAoC,EAAyB;ACG7D,AFF+C,ACA3C,AFgBJ,CAAA,QChBgD,ACA5C,EFgBQ,EChBwC,ACA5C,CDA6C,ACA5C,EDAuC,GAAU,ACAtD,CAAW,AFgBf,EChB+C,ADgB1B,CEhBH,EDA+C,CCA5C,IAAI,CAAC,CDAqB,KCA1B,MAAiB,GAAG,GAAG,CAAN,GAAU,GAA3B,CAAjB,CAAA;AEAJ,ADEA,AFFwE,ACAnB,AFiBjD,CCjBS,ACDA,CFkBT,EIjBJ,OJiBI,CGfJ,AHeI,SAAA,CAAA,GIjBJ,GAAA,KJiBI,CAAA,CIjBJ,CAAA,CJiBI,CAAA,CAAA,CAAA,GAAA,WAAA,cIjBJ,CAAA;ADmBI,AHDA,EAAA,SGCA,AHDA,CAAA,SAAA,CAAA,GGCA,CACY,SADZ,EAEY,MAFZ,CHDA,CGIY,AHJZ,GAAA,CAAA,CAAA,GAAA,GGCA,EAIY,UAJZ,EAKI,KHNJ,KGCA,EAMI,iBANJ,EAMiC;ACxBrC,ADmBgB,AHDf,CAHD,EAAY,CIfZ,KDmBgB,GHJK,GAAT,CIfZ,EDmBgB,CCnBhB,EDmBgB,CHJJ,CAAA,GIfZ,CAAA,GDmBgB,EHJJ,KAAA,OAAA,CAAA,KIfZ,CAAA,GJeY,GAAS,EAAT,CAAZ;AGKgB,SAAA,MAAA,GAAA,MAAA;ACnBhB,ADoBgB,ICpBhB,KDoBgB,KCpBhB,GAAA,GDoBgB,GAAA,CCpBhB,CAAA,SDoBgB,GCpBhB,CAAA;ADqBgB,SAAA,UAAA,GAAA,UAAA;ACnBhB,ADDqB,ICCf,KAAK,ADDU,GCCF,cDDE,GAA4B,CAA5B;ACEjB,ADCiB,ECDjB,OAAO,ADCU,ECDR,EADM,YDEE,GAA2B,CAA3B;ACAjB,ADCiB,ECDjB,ODCiB,ICDN,EAAE,CAFE,SDGE,GAA2B,CAA3B;ACAjB,ADCiB,ECDjB,ODCiB,eAAA,GAAkC,MCDpB,CDCd,CCDgB,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","file":"game_touch.77de5100.js","sourceRoot":"..","sourcesContent":["export interface Game {\n    name: string;\n    level: number;\n    score: number;\n}\n\nexport interface Coordinate {\n    x: number;\n    y: number;\n}\n\nexport interface Field {\n    radius: number;\n    backgroundColor: number;\n    middleCoordinate: Coordinate;\n}\n\nexport enum direction {\n    clockwise = -1,\n    сСlockwise = 1\n}\n\nexport interface Pointer {\n    direction: direction;\n    color: string;\n    angle: number;\n}\n\nexport interface Switcher {\n    rootAngle: number;\n    offsets: number;\n}\n\nexport interface Enemy {\n    xPosition: number;\n    yPosition: number;\n    enemyRadius: number;\n    middlePointAngle: number;\n    enemyAngleRange: Array<number>;\n    enemyId: number;\n}\n","export type GetRadians = (degrees: number) => number;\nexport const getRadians = (degrees: number) => (Math.PI / 180) * degrees;\n","export const randomIntegerInRange = (min: number, max: number): number =>\n    Math.floor(min + Math.random() * (max + 1 - min));\n","import { Enemy, Coordinate } from '../model/game.model';\nimport { GetRadians } from '../helpers/radiant-transformer';\n\nexport class CanvasRenderer {\n    private readonly defaultStartAngle: number = 0;\n    private readonly defaultEndAngle: number;\n\n    private readonly defaultLineWidth: number = 1;\n    private readonly pointerLineWidth: number = 4;\n    private readonly defaultLineJoin: CanvasLineJoin = 'round';\n\n    private readonly middleXCoordinate: number;\n    private readonly middleYCoordinate: number;\n\n    private readonly defaultStrokeStyleColor: string = 'black';\n    private cleanUpBackgroundColor: string = 'white';\n    private enemyStrokeStyleColor: string = 'red';\n    private pointerStyleColor: string = 'blue';\n    private defaultTextColor: string = 'black';\n\n    constructor(\n        private canvasCtx: CanvasRenderingContext2D,\n        private radius: number,\n        private innerRadius: number,\n        private canvasSize: number,\n        getRadians: GetRadians,\n        canvasMiddlePoint: Coordinate\n    ) {\n        this.defaultEndAngle = getRadians(360);\n\n        const { x, y } = canvasMiddlePoint;\n        this.middleXCoordinate = x;\n        this.middleYCoordinate = y;\n\n        this.initCanvas();\n    }\n\n    public drowStaticGameField() {\n        [this.innerRadius, this.radius].forEach((radius: number) => this.drowStrokedCircle(radius));\n    }\n\n    public drowEnemy(\n        radius: number,\n        x: number,\n        y: number,\n        strokeStyleColor: string = this.enemyStrokeStyleColor\n    ) {\n        this.drowStrokedCircle(radius, x, y, strokeStyleColor);\n    }\n\n    public canvasCleanUp() {\n        this.canvasCtx.beginPath();\n        this.canvasCtx.fillStyle = this.cleanUpBackgroundColor;\n        this.canvasCtx.fillRect(0, 0, this.canvasSize, this.canvasSize);\n    }\n\n    public drowEnemies(enemies: Enemy[]) {\n        enemies.forEach(({ xPosition, yPosition, enemyRadius }: Enemy) =>\n            this.drowEnemy(enemyRadius, xPosition, yPosition)\n        );\n    }\n\n    public drowPointer(xPosition: number, yPosition: number) {\n        this.canvasCtx.beginPath();\n        this.setPathView(this.pointerStyleColor, this.pointerLineWidth, this.defaultLineJoin);\n\n        this.canvasCtx.moveTo(this.middleXCoordinate, this.middleYCoordinate);\n        this.canvasCtx.lineTo(xPosition, yPosition);\n\n        this.canvasCtx.stroke();\n    }\n\n    public drowText(\n        messageWithCounter: string,\n        { x, y }: Coordinate,\n        specificTextColor: string | null\n    ) {\n        this.canvasCtx.font = '25px Arial';\n        this.canvasCtx.fillStyle = specificTextColor || this.defaultTextColor;\n        this.canvasCtx.fillText(messageWithCounter, x, y);\n    }\n\n    private drowStrokedCircle(\n        radius: number,\n        x: number = this.middleXCoordinate,\n        y: number = this.middleYCoordinate,\n        strokeStyleColor: string = this.defaultStrokeStyleColor,\n        lineWidth: number = this.defaultLineWidth,\n        startAngle: number = this.defaultStartAngle,\n        endAngle: number = this.defaultEndAngle,\n        lineJoin: CanvasLineJoin = this.defaultLineJoin\n    ) {\n        this.canvasCtx.beginPath();\n        this.setPathView(strokeStyleColor, lineWidth, lineJoin);\n\n        this.canvasCtx.arc(x, y, radius, startAngle, endAngle);\n        this.canvasCtx.stroke();\n    }\n\n    private initCanvas() {\n        this.canvasCtx.canvas.width = this.canvasSize;\n        this.canvasCtx.canvas.height = this.canvasSize;\n        this.canvasCtx.canvas.style.backgroundColor = this.cleanUpBackgroundColor;\n    }\n\n    private setPathView(strokeStyleColor: string, lineWidth: number, lineJoin: CanvasLineJoin) {\n        this.canvasCtx.strokeStyle = strokeStyleColor;\n        this.canvasCtx.lineWidth = lineWidth;\n        this.canvasCtx.lineJoin = lineJoin;\n    }\n}\n","import { Coordinate, direction, Enemy } from '../model/game.model';\nimport { getRadians } from '../helpers/radiant-transformer';\nimport { randomIntegerInRange } from '../helpers/randomizer';\nimport { CanvasRenderer } from './renderer';\n\nconst state: any = {\n    enemies: [],\n    tickCounter: 0,\n    countOfTicksWithoutEnemyDestory: 0,\n    changeDirectionCounter: 5\n};\n\nconst { clockwise, сСlockwise } = direction;\nconst domRectList = document.body.getClientRects();\nconst { width, height } = domRectList[0];\n\nconst canvasSize = width > height ? height : width;\nconst canvasMiddlePosition = canvasSize / 2;\nconst radius = canvasMiddlePosition * 0.9;\nconst innerRadius = radius / 3;\nconst minimumEnemyOffset = 20;\n\nconst canvasMiddlePoint: Coordinate = {\n    x: canvasMiddlePosition,\n    y: canvasMiddlePosition\n};\n\nconst { x, y } = canvasMiddlePoint;\nlet angle = 179;\n\nconst canvas = document.getElementById('canvas') as HTMLCanvasElement;\nconst ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n\nconst canvasRenderer = new CanvasRenderer(\n    ctx,\n    radius,\n    innerRadius,\n    canvasSize,\n    getRadians,\n    canvasMiddlePoint\n);\n\nlet pointerDirection = clockwise;\n\nconst setDocumentListener = (listener: () => void) => {\n    document.addEventListener('click', listener);\n    document.addEventListener('keydown', listener);\n};\nconst drowPointer = (angle: number) => {\n    const angleRad = getRadians(angle);\n    const xPosition = radius * Math.sin(angleRad) + x;\n    const yPosition = radius * Math.cos(angleRad) + y;\n\n    canvasRenderer.drowPointer(xPosition, yPosition);\n};\n\nconst getUpdatedAngle = (updatedAngle: number, direction: number) => {\n    return direction === clockwise\n        ? updatedAngle <= 0\n            ? 360\n            : updatedAngle\n        : updatedAngle >= 360\n        ? 0\n        : updatedAngle;\n};\n\nconst performPointerItaration = () => {\n    drowPointer(angle);\n    angle = getUpdatedAngle(angle + pointerDirection, pointerDirection);\n};\n\nlet incrementId = -1;\n\nconst calclulateEnemy = (angle: number): Enemy => {\n    const minEnemyPosition = Math.abs(angle % 360) + minimumEnemyOffset;\n    const maxEnemyPosition = minEnemyPosition + 360 - minimumEnemyOffset;\n\n    const middlePointAngle = randomIntegerInRange(minimumEnemyOffset, maxEnemyPosition) % 360;\n    const distanceFromMiddlePoint = randomIntegerInRange(innerRadius, radius * 0.9);\n    const enemyRadius = randomIntegerInRange(innerRadius * 0.1, innerRadius * 0.4);\n\n    const angleRad = getRadians(middlePointAngle);\n    const xPosition = distanceFromMiddlePoint * Math.sin(angleRad) + x;\n    const yPosition = distanceFromMiddlePoint * Math.cos(angleRad) + y;\n\n    const angleOffset = (Math.atan(enemyRadius / distanceFromMiddlePoint) * 180) / Math.PI;\n\n    const min = middlePointAngle - angleOffset;\n    const max = middlePointAngle + angleOffset;\n\n    incrementId = incrementId + 1;\n\n    return {\n        xPosition,\n        yPosition,\n        enemyRadius,\n        middlePointAngle,\n        enemyAngleRange: [min, max],\n        enemyId: incrementId\n    };\n};\n\nconst updateEnemies = (angle: number) => {\n    if (!state.enemies.length) {\n        state.enemies.push(calclulateEnemy(angle));\n    }\n\n    canvasRenderer.drowEnemies(state.enemies);\n};\n\nconst addEnemy = (angle: number) => {\n    if (state.enemies.length < 10) {\n        state.enemies.push(calclulateEnemy(angle));\n    }\n};\n\nconst drowChangeDirectionCounter = () => {\n    const { changeDirectionCounter } = state;\n    const messageWithCounter = `change direction tries: ${changeDirectionCounter}`;\n    const specificTextColor = !changeDirectionCounter ? 'red' : null;\n\n    canvasRenderer.drowText(messageWithCounter, { x: 10, y: 40 }, specificTextColor);\n};\n\nconst validateEnemyCounts = (angle: any) => {\n    state.tickCounter = state.tickCounter + 1;\n\n    if (state.tickCounter >= 180) {\n        state.tickCounter = 0;\n        addEnemy(angle);\n    }\n};\n\nconst validateTicksWithoutDestroy = () => {\n    state.countOfTicksWithoutEnemyDestory = state.countOfTicksWithoutEnemyDestory + 1;\n};\n\nconst cleanUpTicksWithoutEnemyDestroy = (isEnemyInRange: boolean) => {\n    if (isEnemyInRange) {\n        state.countOfTicksWithoutEnemyDestory = 0;\n    }\n};\n\nconst updateChangeDirectionCounter = (diff: number) => {\n    state.changeDirectionCounter = state.changeDirectionCounter + diff;\n\n    if (state.changeDirectionCounter < 0) {\n        state.changeDirectionCounter = 0;\n    }\n};\n\nconst reduceChangeDirectionCounterOnLongPending = () => {\n    if (state.countOfTicksWithoutEnemyDestory > 180) {\n        cleanUpTicksWithoutEnemyDestroy(true);\n        updateChangeDirectionCounter(-1);\n    }\n};\n\nconst startGame = () => {\n    setInterval(() => {\n        canvasRenderer.canvasCleanUp();\n        canvasRenderer.drowStaticGameField();\n        performPointerItaration();\n\n        validateEnemyCounts(angle);\n        validateTicksWithoutDestroy();\n        reduceChangeDirectionCounterOnLongPending();\n\n        updateEnemies(angle);\n        drowChangeDirectionCounter();\n    }, 10);\n};\n\nconst validateChangeDirectionCounter = (isEnemyInRange: boolean) => {\n    const { changeDirectionCounter } = state;\n    const shouldNotReduceCounter = !isEnemyInRange && changeDirectionCounter === 0;\n\n    if (shouldNotReduceCounter) {\n        return;\n    }\n\n    const diff = isEnemyInRange ? 1 : -1;\n    updateChangeDirectionCounter(diff);\n};\n\nconst getUpdatedEnemyStatus = () => {\n    if (!state.enemies.length) {\n        return false;\n    }\n\n    const enemiesInRange = state.enemies\n        .filter(({ enemyAngleRange: [min, max] }: any) => {\n            const validatedAngle = angle === 360 ? 0 : angle;\n            const isEnemyInRange = validatedAngle > min && validatedAngle < max;\n\n            return isEnemyInRange;\n        })\n        .map(({ enemyId }: any) => enemyId);\n\n    let isEnemyInRange = false;\n\n    if (enemiesInRange.length) {\n        state.enemies = state.enemies.filter(\n            (enemy: any) => !enemiesInRange.some((enemyId: number) => enemyId === enemy.enemyId)\n        );\n\n        isEnemyInRange = true;\n    }\n\n    return isEnemyInRange;\n};\n\nconst changePointerDirection = () => {\n    const isEnemyInRange = getUpdatedEnemyStatus();\n    const { changeDirectionCounter } = state;\n    if (changeDirectionCounter || isEnemyInRange) {\n        pointerDirection = pointerDirection === clockwise ? сСlockwise : clockwise;\n    }\n\n    cleanUpTicksWithoutEnemyDestroy(isEnemyInRange);\n    validateChangeDirectionCounter(isEnemyInRange);\n};\n\nlet isGameStarted: boolean = false;\nconst addListenerToStartGame = (listener: () => void) => {\n    const button = document.getElementById('button');\n\n    if (!button) {\n        return;\n    }\n\n    button.addEventListener('keydown', event => event.preventDefault());\n    button.addEventListener('click', () => {\n        if (!isGameStarted) {\n            isGameStarted = true;\n            listener();\n            document.body.focus();\n        }\n    });\n};\nsetDocumentListener(changePointerDirection);\n\naddListenerToStartGame(startGame);\n","import './src/game/';\n"]}